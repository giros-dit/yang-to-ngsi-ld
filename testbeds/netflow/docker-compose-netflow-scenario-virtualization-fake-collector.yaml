version: '3.8'
services:
  context-catalog:
    image: halverneus/static-file-server
    hostname: context-catalog
    container_name: context-catalog
    expose:
      - "8080"
    ports:
      - "8080:8080"
    volumes:
      - ./docker/context-catalog:/web 

  postgres:
    image: postgis/postgis
    hostname: postgres
    container_name: postgres
    ports:
      - "5432"
    environment:
      POSTGRES_USER: ngb
      POSTGRES_PASSWORD: ngb
      POSTGRES_DB: ngb
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "ngb", "-U", "ngb"]
      interval: 10s
      timeout: 5s
      retries: 5

  scorpio:
    image: scorpiobroker/all-in-one-runner:java-latest
    hostname: scorpio
    container_name: scorpio
    expose:
      - "9090"
    ports:
      - "9090:9090"
    depends_on:
      postgres:
        condition: service_healthy
      context-catalog:
        condition: service_started

  fake-goflow2-collector:
    build:
       context: ./docker/fake-goflow2-collector
       dockerfile: Dockerfile
    hostname: fake-goflow2-collector
    container_name: fake-goflow2-collector
    command: ["python3", "-u", "/opt/fake-goflow2-collector/goflow2-collector-kafka.py", "0.5"]
    volumes:
      - ./docker/fake-goflow2-collector:/opt/fake-goflow2-collector
    depends_on:
      kafka:
        condition: service_healthy
      netflow-ngsi-ld-virtualizator:
        condition: service_healthy
      notifier-tester-virtualization:
        condition: service_healthy

  flink-jobmanager:
    image: flink:1.14.4-scala_2.12-java11
    hostname: flink-jobmanager
    container_name: flink-jobmanager
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        parallelism.default: 1

  flink-taskmanager:
    image: flink:1.14.4-scala_2.12-java11
    hostname: flink-taskmanager
    container_name: flink-taskmanager
    depends_on:
      - flink-jobmanager
    command: taskmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 1
        parallelism.default: 1

  kafka:
    image: wurstmeister/kafka:latest
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_LOG_DIRS: "/tmp/kafka-logs"
      KAFKA_CREATE_TOPICS: "network-flows:1:1,netflow-driver-output:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    logging:
      driver: none
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--zookeeper", "zookeeper:2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: zookeeper
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181"
    logging:
      driver: none

  netflow-ngsi-ld-virtualizator:
    build:
      context: .
      dockerfile: ./docker/netflow-ngsi-ld-virtualizator/Dockerfile
    hostname: netflow-ngsi-ld-virtualizator
    container_name: netflow-ngsi-ld-virtualizator
    volumes:
      - ./docker/netflow-ngsi-ld-virtualizator:/opt/netflow-ngsi-ld-virtualizator
    expose:
      - "8089"
    ports:
      - "8089:8089"
    healthcheck:
      test: ["CMD", "python3", "--version"]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      scorpio:
        condition: service_started
      context-catalog:
        condition: service_started
      kafka:
        condition: service_healthy
    restart: always

  notifier-tester-virtualization:
    build:
      context: .
      dockerfile: ./docker/notifier-tester-virtualization/Dockerfile
    hostname: notifier-tester-virtualization
    container_name: notifier-tester-virtualization
    expose:
      - "8082"
    ports:
      - "8082:8082"
    volumes:
      - ./docker/notifier-tester-virtualization/notifier_tester_virtualization:/opt/notifier-tester-virtualization/notifier_tester_virtualization
    healthcheck:
      test: ["CMD", "python3", "--version"]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      scorpio:
        condition: service_started
      context-catalog:
        condition: service_started
      kafka:
        condition: service_healthy
      netflow-ngsi-ld-virtualizator:
        condition: service_healthy
    restart: always