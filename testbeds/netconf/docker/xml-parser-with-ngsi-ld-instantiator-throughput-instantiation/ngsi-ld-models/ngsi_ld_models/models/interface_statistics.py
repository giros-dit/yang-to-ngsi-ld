# coding: utf-8

"""
    OpenAPI schemas for YANG data models ietf-interfaces@2018-02-20.yang, ietf-yang-types@2023-01-23.yang, ietf-ip@2018-02-22.yang, ietf-inet-types@2013-07-15.yang, iana-if-type@2014-05-08.yang.

    OpenAPI schemas for YANG data models compliant with the NGSI-LD OAS V1.6.1 metamodel according to ETSI GS CIM 009 V1.6.1.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from ngsi_ld_models.models.discontinuity_time import DiscontinuityTime
from ngsi_ld_models.models.entity_scope import EntityScope
from ngsi_ld_models.models.geo_property import GeoProperty
from ngsi_ld_models.models.in_broadcast_pkts import InBroadcastPkts
from ngsi_ld_models.models.in_discards import InDiscards
from ngsi_ld_models.models.in_errors import InErrors
from ngsi_ld_models.models.in_multicast_pkts import InMulticastPkts
from ngsi_ld_models.models.in_octets import InOctets
from ngsi_ld_models.models.in_unicast_pkts import InUnicastPkts
from ngsi_ld_models.models.in_unknown_protos import InUnknownProtos
from ngsi_ld_models.models.is_part_of import IsPartOf
from ngsi_ld_models.models.out_broadcast_pkts import OutBroadcastPkts
from ngsi_ld_models.models.out_discards import OutDiscards
from ngsi_ld_models.models.out_errors import OutErrors
from ngsi_ld_models.models.out_multicast_pkts import OutMulticastPkts
from ngsi_ld_models.models.out_octets import OutOctets
from ngsi_ld_models.models.out_unicast_pkts import OutUnicastPkts
from typing import Optional, Set
from typing_extensions import Self

class InterfaceStatistics(BaseModel):
    """
    A collection of interface-related statistics objects.  YANG module: ietf-interfaces.yang 
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Entity id. ")
    type: StrictStr = Field(description="NGSI-LD Entity identifier. It has to be InterfaceStatistics.")
    scope: Optional[EntityScope] = None
    location: Optional[GeoProperty] = None
    observation_space: Optional[GeoProperty] = Field(default=None, alias="observationSpace")
    operation_space: Optional[GeoProperty] = Field(default=None, alias="operationSpace")
    created_at: Optional[datetime] = Field(default=None, description="Is defined as the temporal Property at which the Entity, Property or Relationship was entered into an NGSI-LD system. ", alias="createdAt")
    modified_at: Optional[datetime] = Field(default=None, description="Is defined as the temporal Property at which the Entity, Property or Relationship was last modified in an NGSI-LD system, e.g. in order to correct a previously entered incorrect value. ", alias="modifiedAt")
    deleted_at: Optional[datetime] = Field(default=None, description="Is defined as the temporal Property at which the Entity, Property or Relationship was deleted from an NGSI-LD system.  Entity deletion timestamp. See clause 4.8 It is only used in notifications reporting deletions and in the Temporal Representation of Entities (clause 4.5.6), Properties (clause 4.5.7), Relationships (clause 4.5.8) and LanguageProperties (clause 5.2.32). ", alias="deletedAt")
    discontinuity_time: DiscontinuityTime = Field(alias="discontinuityTime")
    in_octets: Optional[InOctets] = Field(default=None, alias="inOctets")
    in_unicast_pkts: Optional[InUnicastPkts] = Field(default=None, alias="inUnicastPkts")
    in_broadcast_pkts: Optional[InBroadcastPkts] = Field(default=None, alias="inBroadcastPkts")
    in_multicast_pkts: Optional[InMulticastPkts] = Field(default=None, alias="inMulticastPkts")
    in_discards: Optional[InDiscards] = Field(default=None, alias="inDiscards")
    in_errors: Optional[InErrors] = Field(default=None, alias="inErrors")
    in_unknown_protos: Optional[InUnknownProtos] = Field(default=None, alias="inUnknownProtos")
    out_octets: Optional[OutOctets] = Field(default=None, alias="outOctets")
    out_unicast_pkts: Optional[OutUnicastPkts] = Field(default=None, alias="outUnicastPkts")
    out_broadcast_pkts: Optional[OutBroadcastPkts] = Field(default=None, alias="outBroadcastPkts")
    out_multicast_pkts: Optional[OutMulticastPkts] = Field(default=None, alias="outMulticastPkts")
    out_discards: Optional[OutDiscards] = Field(default=None, alias="outDiscards")
    out_errors: Optional[OutErrors] = Field(default=None, alias="outErrors")
    is_part_of: IsPartOf = Field(alias="isPartOf")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "type", "scope", "location", "observationSpace", "operationSpace", "createdAt", "modifiedAt", "deletedAt", "discontinuityTime", "inOctets", "inUnicastPkts", "inBroadcastPkts", "inMulticastPkts", "inDiscards", "inErrors", "inUnknownProtos", "outOctets", "outUnicastPkts", "outBroadcastPkts", "outMulticastPkts", "outDiscards", "outErrors", "isPartOf"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('InterfaceStatistics'):
            raise ValueError("must be one of enum values ('InterfaceStatistics')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InterfaceStatistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "modified_at",
            "deleted_at",
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of scope
        if self.scope:
            _dict['scope'] = self.scope.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of observation_space
        if self.observation_space:
            _dict['observationSpace'] = self.observation_space.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operation_space
        if self.operation_space:
            _dict['operationSpace'] = self.operation_space.to_dict()
        # override the default output from pydantic by calling `to_dict()` of discontinuity_time
        if self.discontinuity_time:
            _dict['discontinuityTime'] = self.discontinuity_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_octets
        if self.in_octets:
            _dict['inOctets'] = self.in_octets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_unicast_pkts
        if self.in_unicast_pkts:
            _dict['inUnicastPkts'] = self.in_unicast_pkts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_broadcast_pkts
        if self.in_broadcast_pkts:
            _dict['inBroadcastPkts'] = self.in_broadcast_pkts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_multicast_pkts
        if self.in_multicast_pkts:
            _dict['inMulticastPkts'] = self.in_multicast_pkts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_discards
        if self.in_discards:
            _dict['inDiscards'] = self.in_discards.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_errors
        if self.in_errors:
            _dict['inErrors'] = self.in_errors.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_unknown_protos
        if self.in_unknown_protos:
            _dict['inUnknownProtos'] = self.in_unknown_protos.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out_octets
        if self.out_octets:
            _dict['outOctets'] = self.out_octets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out_unicast_pkts
        if self.out_unicast_pkts:
            _dict['outUnicastPkts'] = self.out_unicast_pkts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out_broadcast_pkts
        if self.out_broadcast_pkts:
            _dict['outBroadcastPkts'] = self.out_broadcast_pkts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out_multicast_pkts
        if self.out_multicast_pkts:
            _dict['outMulticastPkts'] = self.out_multicast_pkts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out_discards
        if self.out_discards:
            _dict['outDiscards'] = self.out_discards.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out_errors
        if self.out_errors:
            _dict['outErrors'] = self.out_errors.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_part_of
        if self.is_part_of:
            _dict['isPartOf'] = self.is_part_of.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InterfaceStatistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type") if obj.get("type") is not None else 'InterfaceStatistics',
            "scope": EntityScope.from_dict(obj["scope"]) if obj.get("scope") is not None else None,
            "location": GeoProperty.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "observationSpace": GeoProperty.from_dict(obj["observationSpace"]) if obj.get("observationSpace") is not None else None,
            "operationSpace": GeoProperty.from_dict(obj["operationSpace"]) if obj.get("operationSpace") is not None else None,
            "createdAt": obj.get("createdAt"),
            "modifiedAt": obj.get("modifiedAt"),
            "deletedAt": obj.get("deletedAt"),
            "discontinuityTime": DiscontinuityTime.from_dict(obj["discontinuityTime"]) if obj.get("discontinuityTime") is not None else None,
            "inOctets": InOctets.from_dict(obj["inOctets"]) if obj.get("inOctets") is not None else None,
            "inUnicastPkts": InUnicastPkts.from_dict(obj["inUnicastPkts"]) if obj.get("inUnicastPkts") is not None else None,
            "inBroadcastPkts": InBroadcastPkts.from_dict(obj["inBroadcastPkts"]) if obj.get("inBroadcastPkts") is not None else None,
            "inMulticastPkts": InMulticastPkts.from_dict(obj["inMulticastPkts"]) if obj.get("inMulticastPkts") is not None else None,
            "inDiscards": InDiscards.from_dict(obj["inDiscards"]) if obj.get("inDiscards") is not None else None,
            "inErrors": InErrors.from_dict(obj["inErrors"]) if obj.get("inErrors") is not None else None,
            "inUnknownProtos": InUnknownProtos.from_dict(obj["inUnknownProtos"]) if obj.get("inUnknownProtos") is not None else None,
            "outOctets": OutOctets.from_dict(obj["outOctets"]) if obj.get("outOctets") is not None else None,
            "outUnicastPkts": OutUnicastPkts.from_dict(obj["outUnicastPkts"]) if obj.get("outUnicastPkts") is not None else None,
            "outBroadcastPkts": OutBroadcastPkts.from_dict(obj["outBroadcastPkts"]) if obj.get("outBroadcastPkts") is not None else None,
            "outMulticastPkts": OutMulticastPkts.from_dict(obj["outMulticastPkts"]) if obj.get("outMulticastPkts") is not None else None,
            "outDiscards": OutDiscards.from_dict(obj["outDiscards"]) if obj.get("outDiscards") is not None else None,
            "outErrors": OutErrors.from_dict(obj["outErrors"]) if obj.get("outErrors") is not None else None,
            "isPartOf": IsPartOf.from_dict(obj["isPartOf"]) if obj.get("isPartOf") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


