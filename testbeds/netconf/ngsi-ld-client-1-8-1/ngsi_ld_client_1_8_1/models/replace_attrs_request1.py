# coding: utf-8

"""
    NGSI-LD OAS

    OpenAPI Specification for NGSI-LD API.

    The version of the OpenAPI document: 1.8.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from ngsi_ld_client_1_8_1.models.entity import Entity
from ngsi_ld_client_1_8_1.models.geometry import Geometry
from ngsi_ld_client_1_8_1.models.ld_context import LdContext
from ngsi_ld_client_1_8_1.models.list_property_value_list_inner import ListPropertyValueListInner
from ngsi_ld_client_1_8_1.models.list_relationship_object_list import ListRelationshipObjectList
from ngsi_ld_client_1_8_1.models.list_relationship_previous_object_list import ListRelationshipPreviousObjectList
from ngsi_ld_client_1_8_1.models.relationship_entity import RelationshipEntity
from ngsi_ld_client_1_8_1.models.relationship_object import RelationshipObject
from ngsi_ld_client_1_8_1.models.relationship_object_type import RelationshipObjectType
from ngsi_ld_client_1_8_1.models.relationship_previous_object import RelationshipPreviousObject
from ngsi_ld_client_1_8_1.models.vocab_property_previous_vocab import VocabPropertyPreviousVocab
from ngsi_ld_client_1_8_1.models.vocab_property_vocab import VocabPropertyVocab
from typing import Optional, Set
from typing_extensions import Self

class ReplaceAttrsRequest1(BaseModel):
    """
    ReplaceAttrsRequest1
    """ # noqa: E501
    context: LdContext = Field(alias="@context")
    type: Optional[StrictStr] = Field(default='ListRelationship', description="Node type. ")
    value: Optional[Geometry] = None
    observed_at: Optional[datetime] = Field(default=None, description="It is defined as the temporal Property at which a certain Property or Relationship became valid or was observed. For example, a temperature Value was measured by the sensor at this point in time. ", alias="observedAt")
    unit_code: Optional[StrictStr] = Field(default=None, description="Property Value's unit code. ", alias="unitCode")
    dataset_id: Optional[StrictStr] = Field(default=None, description="It allows identifying a set or group of target relationship objects. ", alias="datasetId")
    created_at: Optional[datetime] = Field(default=None, description="It is defined as the temporal Property at which the Entity, Property or Relationship was entered into an NGSI-LD system.  Entity creation timestamp. See clause 4.8. ", alias="createdAt")
    modified_at: Optional[datetime] = Field(default=None, description="It is defined as the temporal Property at which the Entity, Property or Relationship was last modified in an NGSI-LD system, e.g. in order to correct a previously entered incorrect value.  Entity last modification timestamp. See clause 4.8. ", alias="modifiedAt")
    deleted_at: Optional[datetime] = Field(default=None, description="It is defined as the temporal Property at which the Entity, Property or Relationship was deleted from an NGSI-LD system.  Entity deletion timestamp. See clause 4.8. It is only used in notifications reporting deletions and in the Temporal Representation of Entities (clause 4.5.6), Properties (clause 4.5.7), Relationships (clause 4.5.8) and LanguageProperties (clause 5.2.32). ", alias="deletedAt")
    instance_id: Optional[StrictStr] = Field(default=None, description="A URI uniquely identifying a ListRelationship instance as mandated by clause 4.5.8. System generated. Only used in temporal representation of ListRelationships. ", alias="instanceId")
    previous_value: Optional[Geometry] = Field(default=None, alias="previousValue")
    object: Optional[RelationshipObject] = None
    object_type: Optional[RelationshipObjectType] = Field(default=None, alias="objectType")
    previous_object: Optional[RelationshipPreviousObject] = Field(default=None, alias="previousObject")
    entity: Optional[RelationshipEntity] = None
    language_map: Optional[Dict[str, Any]] = Field(default=None, description="String Property Values defined in multiple natural languages. ", alias="languageMap")
    previous_language_map: Optional[Dict[str, Any]] = Field(default=None, description="Previous LanguageProperty's languageMap. Only used in notifications, if the showChanges  option is explicitly requested. ", alias="previousLanguageMap")
    vocab: Optional[VocabPropertyVocab] = None
    previous_vocab: Optional[VocabPropertyPreviousVocab] = Field(default=None, alias="previousVocab")
    var_json: Optional[Dict[str, Any]] = Field(default=None, description="Raw unexpandable JSON which shall not be interpreted as JSON-LD using the supplied @context. ", alias="json")
    previous_json: Optional[Dict[str, Any]] = Field(default=None, description="Previous JsonProperty's json. Only used in notifications, if the showChanges  option is explicitly requested. ", alias="previousJson")
    value_list: Optional[List[ListPropertyValueListInner]] = Field(default=None, description="Ordered array of Property Values. ", alias="valueList")
    previous_value_list: Optional[List[ListPropertyValueListInner]] = Field(default=None, description="Ordered array of Property Values. See NGSI-LD Value definition in clause 3.1 ", alias="previousValueList")
    object_list: Optional[ListRelationshipObjectList] = Field(default=None, alias="objectList")
    previous_object_list: Optional[ListRelationshipPreviousObjectList] = Field(default=None, alias="previousObjectList")
    entity_list: Optional[List[Entity]] = Field(default=None, description="An array of inline Entity obtained by Linked Entity Retrieval, corresponding  to the ListRelationship's target object. See clause 4.5.23.2. Only used in  Linked Entity Retrieval, if the join=inline option is explicitly requested. ", alias="entityList")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["@context", "type", "value", "observedAt", "unitCode", "datasetId", "createdAt", "modifiedAt", "deletedAt", "instanceId", "previousValue", "object", "objectType", "previousObject", "entity", "languageMap", "previousLanguageMap", "vocab", "previousVocab", "json", "previousJson", "valueList", "previousValueList", "objectList", "previousObjectList", "entityList"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ListRelationship']):
            raise ValueError("must be one of enum values ('ListRelationship')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReplaceAttrsRequest1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "instance_id",
            "previous_language_map",
            "previous_json",
            "previous_value_list",
            "entity_list",
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['@context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of value
        if self.value:
            _dict['value'] = self.value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of previous_value
        if self.previous_value:
            _dict['previousValue'] = self.previous_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of object
        if self.object:
            _dict['object'] = self.object.to_dict()
        # override the default output from pydantic by calling `to_dict()` of object_type
        if self.object_type:
            _dict['objectType'] = self.object_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of previous_object
        if self.previous_object:
            _dict['previousObject'] = self.previous_object.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entity
        if self.entity:
            _dict['entity'] = self.entity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vocab
        if self.vocab:
            _dict['vocab'] = self.vocab.to_dict()
        # override the default output from pydantic by calling `to_dict()` of previous_vocab
        if self.previous_vocab:
            _dict['previousVocab'] = self.previous_vocab.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in value_list (list)
        _items = []
        if self.value_list:
            for _item_value_list in self.value_list:
                if _item_value_list:
                    _items.append(_item_value_list.to_dict())
            _dict['valueList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in previous_value_list (list)
        _items = []
        if self.previous_value_list:
            for _item_previous_value_list in self.previous_value_list:
                if _item_previous_value_list:
                    _items.append(_item_previous_value_list.to_dict())
            _dict['previousValueList'] = _items
        # override the default output from pydantic by calling `to_dict()` of object_list
        if self.object_list:
            _dict['objectList'] = self.object_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of previous_object_list
        if self.previous_object_list:
            _dict['previousObjectList'] = self.previous_object_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in entity_list (list)
        _items = []
        if self.entity_list:
            for _item_entity_list in self.entity_list:
                if _item_entity_list:
                    _items.append(_item_entity_list.to_dict())
            _dict['entityList'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReplaceAttrsRequest1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "@context": LdContext.from_dict(obj["@context"]) if obj.get("@context") is not None else None,
            "type": obj.get("type") if obj.get("type") is not None else 'ListRelationship',
            "value": Geometry.from_dict(obj["value"]) if obj.get("value") is not None else None,
            "observedAt": obj.get("observedAt"),
            "unitCode": obj.get("unitCode"),
            "datasetId": obj.get("datasetId"),
            "createdAt": obj.get("createdAt"),
            "modifiedAt": obj.get("modifiedAt"),
            "deletedAt": obj.get("deletedAt"),
            "instanceId": obj.get("instanceId"),
            "previousValue": Geometry.from_dict(obj["previousValue"]) if obj.get("previousValue") is not None else None,
            "object": RelationshipObject.from_dict(obj["object"]) if obj.get("object") is not None else None,
            "objectType": RelationshipObjectType.from_dict(obj["objectType"]) if obj.get("objectType") is not None else None,
            "previousObject": RelationshipPreviousObject.from_dict(obj["previousObject"]) if obj.get("previousObject") is not None else None,
            "entity": RelationshipEntity.from_dict(obj["entity"]) if obj.get("entity") is not None else None,
            "languageMap": obj.get("languageMap"),
            "previousLanguageMap": obj.get("previousLanguageMap"),
            "vocab": VocabPropertyVocab.from_dict(obj["vocab"]) if obj.get("vocab") is not None else None,
            "previousVocab": VocabPropertyPreviousVocab.from_dict(obj["previousVocab"]) if obj.get("previousVocab") is not None else None,
            "json": obj.get("json"),
            "previousJson": obj.get("previousJson"),
            "valueList": [ListPropertyValueListInner.from_dict(_item) for _item in obj["valueList"]] if obj.get("valueList") is not None else None,
            "previousValueList": [ListPropertyValueListInner.from_dict(_item) for _item in obj["previousValueList"]] if obj.get("previousValueList") is not None else None,
            "objectList": ListRelationshipObjectList.from_dict(obj["objectList"]) if obj.get("objectList") is not None else None,
            "previousObjectList": ListRelationshipPreviousObjectList.from_dict(obj["previousObjectList"]) if obj.get("previousObjectList") is not None else None,
            "entityList": [Entity.from_dict(_item) for _item in obj["entityList"]] if obj.get("entityList") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


