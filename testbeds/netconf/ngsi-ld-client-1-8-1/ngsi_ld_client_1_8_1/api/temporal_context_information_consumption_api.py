# coding: utf-8

"""
    NGSI-LD OAS

    OpenAPI Specification for NGSI-LD API.

    The version of the OpenAPI document: 1.8.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictStr, field_validator
from typing import Any, List, Optional
from typing_extensions import Annotated
from ngsi_ld_client_1_8_1.models.format_temporal import FormatTemporal
from ngsi_ld_client_1_8_1.models.options_sys_attrs import OptionsSysAttrs
from ngsi_ld_client_1_8_1.models.query_temporal import QueryTemporal
from ngsi_ld_client_1_8_1.models.query_temporal200_response_inner import QueryTemporal200ResponseInner

from ngsi_ld_client_1_8_1.api_client import ApiClient, RequestSerialized
from ngsi_ld_client_1_8_1.api_response import ApiResponse
from ngsi_ld_client_1_8_1.rest import RESTResponseType


class TemporalContextInformationConsumptionApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def query_temporal(
        self,
        id: Annotated[Optional[List[StrictStr]], Field(description="List of entity ids to be retrieved.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Selection of Entity Types as per clause 4.17. \"*\" is also allowed as a value and local is  implicitly set to true and shall not be explicitly set to false. ")] = None,
        id_pattern: Annotated[Optional[StrictStr], Field(description="Regular expression that shall be matched by entity ids.")] = None,
        attrs: Annotated[Optional[List[StrictStr]], Field(description="List of Attributes to be matched by the Entity and included in the response. If the Entity does not have any of the Attributes in attrs, then a 404 Not Found shall be retrieved. If attrs is not specified, no matching is performed and all Attributes related to the Entity shall be retrieved.  A synonym for a combination of the pick and q parameters. DEPRECATED. Each String is an Attribute (Property or Relationship) name. ")] = None,
        pick: Annotated[Optional[List[StrictStr]], Field(description="Each String is an Entity member (\"id\", \"type\", \"scope\" or a projected Attribute name). When defined, every Entity within the payload body is reduced down to only contain  the listed Entity members. ")] = None,
        omit: Annotated[Optional[List[StrictStr]], Field(description="Each String is an Entity member (\"id\", \"type\", \"scope\" or a projected Attribute name).  When defined, the listed Entity members are removed from each Entity within the payload. ")] = None,
        q: Annotated[Optional[StrictStr], Field(description="Query as per clause 4.9. ")] = None,
        csf: Annotated[Optional[StrictStr], Field(description="Context Source filter as per clause 4.9.")] = None,
        geometry: Annotated[Optional[StrictStr], Field(description="Geometry as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present. ")] = None,
        georel: Annotated[Optional[Any], Field(description="Geo relationship as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present. ")] = None,
        coordinates: Annotated[Optional[Any], Field(description="Coordinates serialized as a string as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present. ")] = None,
        geoproperty: Annotated[Optional[StrictStr], Field(description="The name of the Property that contains the geospatial data that will be used to resolve the geoquery. By default, will be location (see clause 4.7). It shall be ignored unless a geoquery is present. ")] = None,
        timeproperty: Annotated[Optional[StrictStr], Field(description="Allowed values: \"observedAt\", \"createdAt\", \"modifiedAt\" and \"deletedAt\". If not specified, the default is \"observedAt\". (See clause 4.8) ")] = None,
        timerel: Annotated[Optional[StrictStr], Field(description="Allowed values: \"before\", \"after\", \"between\" ")] = None,
        time_at: Annotated[Optional[datetime], Field(description="It shall be a DateTime. Cardinality shall be 1 if timerel is present. String representing the timeAt parameter as defined by clause 4.11. ")] = None,
        end_time_at: Annotated[Optional[datetime], Field(description="It shall be a DateTime. Cardinality shall be 1 if timerel is equal to \"between\". String representing the endTimeAt parameter as defined by clause 4.11. ")] = None,
        last_n: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Only the last n instances, per Attribute, per Entity (under the specified time interval) shall be retrieved. ")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="It is used to reduce languageMaps to a string or string array property in a single preferred language. ")] = None,
        aggr_methods: Annotated[Optional[StrictStr], Field(description="4.5.19.1 Aggregated Temporal Representation of an Entity.  Comma separated list of aggregation methods.  Only applicable if aggregatedValues is present in the options parameter. ")] = None,
        aggr_period_duration: Annotated[Optional[StrictStr], Field(description="If not specified, it defaults to a duration of 0 seconds and is interpreted as a duration spanning the whole time range specified by the temporal query.  Only applicable if aggregatedValues is present in the options parameter. ")] = None,
        scope_q: Annotated[Optional[StrictStr], Field(description="Scope query (see clause 4.19). ")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Specifies the datasetIds of the Attribute instances to be selected for each matched Attribute as per clause 4.5.5,  or the datasetId of the dataset to be deleted. ")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="6.3.10 Pagination behaviour. It defines the limit to the number of NGSI-LD Elements that shall be retrieved at a maximum as mandated by clause 5.5.9. The value 0 is only allowed in combination with the count URI parameter. ")] = None,
        count: Annotated[Optional[StrictBool], Field(description="6.3.13 Counting number of results. If true, then a special HTTP header (NGSILD-Results-Count) is set in the response. Regardless of how many entities are actually returned (maybe due to the \"limit\" URI parameter), the total number of matching results (e.g. number of Entities) is returned. ")] = None,
        options: Optional[List[OptionsSysAttrs]] = None,
        format: Optional[FormatTemporal] = None,
        local: Annotated[Optional[StrictBool], Field(description="6.3.18 Limiting Distributed Operations. If local=true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  The parameter described in this clause limits the execution of an operation to a local Context Source  or Context Broker (clause 5.5.13). ")] = None,
        link: Annotated[Optional[StrictStr], Field(description="6.3.5 JSON-LD @context resolution  In summary, from a developer's perspective, for POST, PATCH and PUT operations, if MIME type is \"application/ld+json\", then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \"application/json\", then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header. ")] = None,
        ngsild_tenant: Annotated[Optional[StrictStr], Field(description="6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted. ")] = None,
        via: Annotated[Optional[StrictStr], Field(description="6.3.18 Limiting Distributed Operations  If present, the listing of previously encountered Context Sources supplied is used when determining  matching registrations. HTTP Via Header (IETF RFC 7230).  Any Context Broker implementation passing a distributed operation request onward to another Context Source  shall send an additional field value on the Via header field using its own unique Context Source \"hostAlias\"  (see clause 5.2.40) as the pseudonym. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[QueryTemporal200ResponseInner]:
        """Query temporal evolution of Entities 

        5.7.4 Query Temporal Evolution of Entities.  This operation allows querying the temporal evolution of Entities present in an NGSI-LD system. It is similar to the operation defined by clause 5.7.2 (Query Entities) with the addition of a temporal query.  *The query parameters timerel and timeAt are required. 

        :param id: List of entity ids to be retrieved.
        :type id: List[str]
        :param type: Selection of Entity Types as per clause 4.17. \"*\" is also allowed as a value and local is  implicitly set to true and shall not be explicitly set to false. 
        :type type: str
        :param id_pattern: Regular expression that shall be matched by entity ids.
        :type id_pattern: str
        :param attrs: List of Attributes to be matched by the Entity and included in the response. If the Entity does not have any of the Attributes in attrs, then a 404 Not Found shall be retrieved. If attrs is not specified, no matching is performed and all Attributes related to the Entity shall be retrieved.  A synonym for a combination of the pick and q parameters. DEPRECATED. Each String is an Attribute (Property or Relationship) name. 
        :type attrs: List[str]
        :param pick: Each String is an Entity member (\"id\", \"type\", \"scope\" or a projected Attribute name). When defined, every Entity within the payload body is reduced down to only contain  the listed Entity members. 
        :type pick: List[str]
        :param omit: Each String is an Entity member (\"id\", \"type\", \"scope\" or a projected Attribute name).  When defined, the listed Entity members are removed from each Entity within the payload. 
        :type omit: List[str]
        :param q: Query as per clause 4.9. 
        :type q: str
        :param csf: Context Source filter as per clause 4.9.
        :type csf: str
        :param geometry: Geometry as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present. 
        :type geometry: str
        :param georel: Geo relationship as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present. 
        :type georel: QueryEntityGeorelParameter
        :param coordinates: Coordinates serialized as a string as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present. 
        :type coordinates: QueryEntityCoordinatesParameter
        :param geoproperty: The name of the Property that contains the geospatial data that will be used to resolve the geoquery. By default, will be location (see clause 4.7). It shall be ignored unless a geoquery is present. 
        :type geoproperty: str
        :param timeproperty: Allowed values: \"observedAt\", \"createdAt\", \"modifiedAt\" and \"deletedAt\". If not specified, the default is \"observedAt\". (See clause 4.8) 
        :type timeproperty: str
        :param timerel: Allowed values: \"before\", \"after\", \"between\" 
        :type timerel: str
        :param time_at: It shall be a DateTime. Cardinality shall be 1 if timerel is present. String representing the timeAt parameter as defined by clause 4.11. 
        :type time_at: datetime
        :param end_time_at: It shall be a DateTime. Cardinality shall be 1 if timerel is equal to \"between\". String representing the endTimeAt parameter as defined by clause 4.11. 
        :type end_time_at: datetime
        :param last_n: Only the last n instances, per Attribute, per Entity (under the specified time interval) shall be retrieved. 
        :type last_n: int
        :param lang: It is used to reduce languageMaps to a string or string array property in a single preferred language. 
        :type lang: str
        :param aggr_methods: 4.5.19.1 Aggregated Temporal Representation of an Entity.  Comma separated list of aggregation methods.  Only applicable if aggregatedValues is present in the options parameter. 
        :type aggr_methods: str
        :param aggr_period_duration: If not specified, it defaults to a duration of 0 seconds and is interpreted as a duration spanning the whole time range specified by the temporal query.  Only applicable if aggregatedValues is present in the options parameter. 
        :type aggr_period_duration: str
        :param scope_q: Scope query (see clause 4.19). 
        :type scope_q: str
        :param dataset_id: Specifies the datasetIds of the Attribute instances to be selected for each matched Attribute as per clause 4.5.5,  or the datasetId of the dataset to be deleted. 
        :type dataset_id: QueryEntityDatasetIdParameter
        :param limit: 6.3.10 Pagination behaviour. It defines the limit to the number of NGSI-LD Elements that shall be retrieved at a maximum as mandated by clause 5.5.9. The value 0 is only allowed in combination with the count URI parameter. 
        :type limit: int
        :param count: 6.3.13 Counting number of results. If true, then a special HTTP header (NGSILD-Results-Count) is set in the response. Regardless of how many entities are actually returned (maybe due to the \"limit\" URI parameter), the total number of matching results (e.g. number of Entities) is returned. 
        :type count: bool
        :param options:
        :type options: List[OptionsSysAttrs]
        :param format:
        :type format: FormatTemporal
        :param local: 6.3.18 Limiting Distributed Operations. If local=true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  The parameter described in this clause limits the execution of an operation to a local Context Source  or Context Broker (clause 5.5.13). 
        :type local: bool
        :param link: 6.3.5 JSON-LD @context resolution  In summary, from a developer's perspective, for POST, PATCH and PUT operations, if MIME type is \"application/ld+json\", then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \"application/json\", then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header. 
        :type link: str
        :param ngsild_tenant: 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted. 
        :type ngsild_tenant: str
        :param via: 6.3.18 Limiting Distributed Operations  If present, the listing of previously encountered Context Sources supplied is used when determining  matching registrations. HTTP Via Header (IETF RFC 7230).  Any Context Broker implementation passing a distributed operation request onward to another Context Source  shall send an additional field value on the Via header field using its own unique Context Source \"hostAlias\"  (see clause 5.2.40) as the pseudonym. 
        :type via: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._query_temporal_serialize(
            id=id,
            type=type,
            id_pattern=id_pattern,
            attrs=attrs,
            pick=pick,
            omit=omit,
            q=q,
            csf=csf,
            geometry=geometry,
            georel=georel,
            coordinates=coordinates,
            geoproperty=geoproperty,
            timeproperty=timeproperty,
            timerel=timerel,
            time_at=time_at,
            end_time_at=end_time_at,
            last_n=last_n,
            lang=lang,
            aggr_methods=aggr_methods,
            aggr_period_duration=aggr_period_duration,
            scope_q=scope_q,
            dataset_id=dataset_id,
            limit=limit,
            count=count,
            options=options,
            format=format,
            local=local,
            link=link,
            ngsild_tenant=ngsild_tenant,
            via=via,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[QueryTemporal200ResponseInner]",
            '400': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def query_temporal_with_http_info(
        self,
        id: Annotated[Optional[List[StrictStr]], Field(description="List of entity ids to be retrieved.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Selection of Entity Types as per clause 4.17. \"*\" is also allowed as a value and local is  implicitly set to true and shall not be explicitly set to false. ")] = None,
        id_pattern: Annotated[Optional[StrictStr], Field(description="Regular expression that shall be matched by entity ids.")] = None,
        attrs: Annotated[Optional[List[StrictStr]], Field(description="List of Attributes to be matched by the Entity and included in the response. If the Entity does not have any of the Attributes in attrs, then a 404 Not Found shall be retrieved. If attrs is not specified, no matching is performed and all Attributes related to the Entity shall be retrieved.  A synonym for a combination of the pick and q parameters. DEPRECATED. Each String is an Attribute (Property or Relationship) name. ")] = None,
        pick: Annotated[Optional[List[StrictStr]], Field(description="Each String is an Entity member (\"id\", \"type\", \"scope\" or a projected Attribute name). When defined, every Entity within the payload body is reduced down to only contain  the listed Entity members. ")] = None,
        omit: Annotated[Optional[List[StrictStr]], Field(description="Each String is an Entity member (\"id\", \"type\", \"scope\" or a projected Attribute name).  When defined, the listed Entity members are removed from each Entity within the payload. ")] = None,
        q: Annotated[Optional[StrictStr], Field(description="Query as per clause 4.9. ")] = None,
        csf: Annotated[Optional[StrictStr], Field(description="Context Source filter as per clause 4.9.")] = None,
        geometry: Annotated[Optional[StrictStr], Field(description="Geometry as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present. ")] = None,
        georel: Annotated[Optional[Any], Field(description="Geo relationship as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present. ")] = None,
        coordinates: Annotated[Optional[Any], Field(description="Coordinates serialized as a string as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present. ")] = None,
        geoproperty: Annotated[Optional[StrictStr], Field(description="The name of the Property that contains the geospatial data that will be used to resolve the geoquery. By default, will be location (see clause 4.7). It shall be ignored unless a geoquery is present. ")] = None,
        timeproperty: Annotated[Optional[StrictStr], Field(description="Allowed values: \"observedAt\", \"createdAt\", \"modifiedAt\" and \"deletedAt\". If not specified, the default is \"observedAt\". (See clause 4.8) ")] = None,
        timerel: Annotated[Optional[StrictStr], Field(description="Allowed values: \"before\", \"after\", \"between\" ")] = None,
        time_at: Annotated[Optional[datetime], Field(description="It shall be a DateTime. Cardinality shall be 1 if timerel is present. String representing the timeAt parameter as defined by clause 4.11. ")] = None,
        end_time_at: Annotated[Optional[datetime], Field(description="It shall be a DateTime. Cardinality shall be 1 if timerel is equal to \"between\". String representing the endTimeAt parameter as defined by clause 4.11. ")] = None,
        last_n: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Only the last n instances, per Attribute, per Entity (under the specified time interval) shall be retrieved. ")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="It is used to reduce languageMaps to a string or string array property in a single preferred language. ")] = None,
        aggr_methods: Annotated[Optional[StrictStr], Field(description="4.5.19.1 Aggregated Temporal Representation of an Entity.  Comma separated list of aggregation methods.  Only applicable if aggregatedValues is present in the options parameter. ")] = None,
        aggr_period_duration: Annotated[Optional[StrictStr], Field(description="If not specified, it defaults to a duration of 0 seconds and is interpreted as a duration spanning the whole time range specified by the temporal query.  Only applicable if aggregatedValues is present in the options parameter. ")] = None,
        scope_q: Annotated[Optional[StrictStr], Field(description="Scope query (see clause 4.19). ")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Specifies the datasetIds of the Attribute instances to be selected for each matched Attribute as per clause 4.5.5,  or the datasetId of the dataset to be deleted. ")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="6.3.10 Pagination behaviour. It defines the limit to the number of NGSI-LD Elements that shall be retrieved at a maximum as mandated by clause 5.5.9. The value 0 is only allowed in combination with the count URI parameter. ")] = None,
        count: Annotated[Optional[StrictBool], Field(description="6.3.13 Counting number of results. If true, then a special HTTP header (NGSILD-Results-Count) is set in the response. Regardless of how many entities are actually returned (maybe due to the \"limit\" URI parameter), the total number of matching results (e.g. number of Entities) is returned. ")] = None,
        options: Optional[List[OptionsSysAttrs]] = None,
        format: Optional[FormatTemporal] = None,
        local: Annotated[Optional[StrictBool], Field(description="6.3.18 Limiting Distributed Operations. If local=true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  The parameter described in this clause limits the execution of an operation to a local Context Source  or Context Broker (clause 5.5.13). ")] = None,
        link: Annotated[Optional[StrictStr], Field(description="6.3.5 JSON-LD @context resolution  In summary, from a developer's perspective, for POST, PATCH and PUT operations, if MIME type is \"application/ld+json\", then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \"application/json\", then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header. ")] = None,
        ngsild_tenant: Annotated[Optional[StrictStr], Field(description="6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted. ")] = None,
        via: Annotated[Optional[StrictStr], Field(description="6.3.18 Limiting Distributed Operations  If present, the listing of previously encountered Context Sources supplied is used when determining  matching registrations. HTTP Via Header (IETF RFC 7230).  Any Context Broker implementation passing a distributed operation request onward to another Context Source  shall send an additional field value on the Via header field using its own unique Context Source \"hostAlias\"  (see clause 5.2.40) as the pseudonym. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[QueryTemporal200ResponseInner]]:
        """Query temporal evolution of Entities 

        5.7.4 Query Temporal Evolution of Entities.  This operation allows querying the temporal evolution of Entities present in an NGSI-LD system. It is similar to the operation defined by clause 5.7.2 (Query Entities) with the addition of a temporal query.  *The query parameters timerel and timeAt are required. 

        :param id: List of entity ids to be retrieved.
        :type id: List[str]
        :param type: Selection of Entity Types as per clause 4.17. \"*\" is also allowed as a value and local is  implicitly set to true and shall not be explicitly set to false. 
        :type type: str
        :param id_pattern: Regular expression that shall be matched by entity ids.
        :type id_pattern: str
        :param attrs: List of Attributes to be matched by the Entity and included in the response. If the Entity does not have any of the Attributes in attrs, then a 404 Not Found shall be retrieved. If attrs is not specified, no matching is performed and all Attributes related to the Entity shall be retrieved.  A synonym for a combination of the pick and q parameters. DEPRECATED. Each String is an Attribute (Property or Relationship) name. 
        :type attrs: List[str]
        :param pick: Each String is an Entity member (\"id\", \"type\", \"scope\" or a projected Attribute name). When defined, every Entity within the payload body is reduced down to only contain  the listed Entity members. 
        :type pick: List[str]
        :param omit: Each String is an Entity member (\"id\", \"type\", \"scope\" or a projected Attribute name).  When defined, the listed Entity members are removed from each Entity within the payload. 
        :type omit: List[str]
        :param q: Query as per clause 4.9. 
        :type q: str
        :param csf: Context Source filter as per clause 4.9.
        :type csf: str
        :param geometry: Geometry as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present. 
        :type geometry: str
        :param georel: Geo relationship as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present. 
        :type georel: QueryEntityGeorelParameter
        :param coordinates: Coordinates serialized as a string as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present. 
        :type coordinates: QueryEntityCoordinatesParameter
        :param geoproperty: The name of the Property that contains the geospatial data that will be used to resolve the geoquery. By default, will be location (see clause 4.7). It shall be ignored unless a geoquery is present. 
        :type geoproperty: str
        :param timeproperty: Allowed values: \"observedAt\", \"createdAt\", \"modifiedAt\" and \"deletedAt\". If not specified, the default is \"observedAt\". (See clause 4.8) 
        :type timeproperty: str
        :param timerel: Allowed values: \"before\", \"after\", \"between\" 
        :type timerel: str
        :param time_at: It shall be a DateTime. Cardinality shall be 1 if timerel is present. String representing the timeAt parameter as defined by clause 4.11. 
        :type time_at: datetime
        :param end_time_at: It shall be a DateTime. Cardinality shall be 1 if timerel is equal to \"between\". String representing the endTimeAt parameter as defined by clause 4.11. 
        :type end_time_at: datetime
        :param last_n: Only the last n instances, per Attribute, per Entity (under the specified time interval) shall be retrieved. 
        :type last_n: int
        :param lang: It is used to reduce languageMaps to a string or string array property in a single preferred language. 
        :type lang: str
        :param aggr_methods: 4.5.19.1 Aggregated Temporal Representation of an Entity.  Comma separated list of aggregation methods.  Only applicable if aggregatedValues is present in the options parameter. 
        :type aggr_methods: str
        :param aggr_period_duration: If not specified, it defaults to a duration of 0 seconds and is interpreted as a duration spanning the whole time range specified by the temporal query.  Only applicable if aggregatedValues is present in the options parameter. 
        :type aggr_period_duration: str
        :param scope_q: Scope query (see clause 4.19). 
        :type scope_q: str
        :param dataset_id: Specifies the datasetIds of the Attribute instances to be selected for each matched Attribute as per clause 4.5.5,  or the datasetId of the dataset to be deleted. 
        :type dataset_id: QueryEntityDatasetIdParameter
        :param limit: 6.3.10 Pagination behaviour. It defines the limit to the number of NGSI-LD Elements that shall be retrieved at a maximum as mandated by clause 5.5.9. The value 0 is only allowed in combination with the count URI parameter. 
        :type limit: int
        :param count: 6.3.13 Counting number of results. If true, then a special HTTP header (NGSILD-Results-Count) is set in the response. Regardless of how many entities are actually returned (maybe due to the \"limit\" URI parameter), the total number of matching results (e.g. number of Entities) is returned. 
        :type count: bool
        :param options:
        :type options: List[OptionsSysAttrs]
        :param format:
        :type format: FormatTemporal
        :param local: 6.3.18 Limiting Distributed Operations. If local=true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  The parameter described in this clause limits the execution of an operation to a local Context Source  or Context Broker (clause 5.5.13). 
        :type local: bool
        :param link: 6.3.5 JSON-LD @context resolution  In summary, from a developer's perspective, for POST, PATCH and PUT operations, if MIME type is \"application/ld+json\", then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \"application/json\", then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header. 
        :type link: str
        :param ngsild_tenant: 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted. 
        :type ngsild_tenant: str
        :param via: 6.3.18 Limiting Distributed Operations  If present, the listing of previously encountered Context Sources supplied is used when determining  matching registrations. HTTP Via Header (IETF RFC 7230).  Any Context Broker implementation passing a distributed operation request onward to another Context Source  shall send an additional field value on the Via header field using its own unique Context Source \"hostAlias\"  (see clause 5.2.40) as the pseudonym. 
        :type via: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._query_temporal_serialize(
            id=id,
            type=type,
            id_pattern=id_pattern,
            attrs=attrs,
            pick=pick,
            omit=omit,
            q=q,
            csf=csf,
            geometry=geometry,
            georel=georel,
            coordinates=coordinates,
            geoproperty=geoproperty,
            timeproperty=timeproperty,
            timerel=timerel,
            time_at=time_at,
            end_time_at=end_time_at,
            last_n=last_n,
            lang=lang,
            aggr_methods=aggr_methods,
            aggr_period_duration=aggr_period_duration,
            scope_q=scope_q,
            dataset_id=dataset_id,
            limit=limit,
            count=count,
            options=options,
            format=format,
            local=local,
            link=link,
            ngsild_tenant=ngsild_tenant,
            via=via,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[QueryTemporal200ResponseInner]",
            '400': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def query_temporal_without_preload_content(
        self,
        id: Annotated[Optional[List[StrictStr]], Field(description="List of entity ids to be retrieved.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Selection of Entity Types as per clause 4.17. \"*\" is also allowed as a value and local is  implicitly set to true and shall not be explicitly set to false. ")] = None,
        id_pattern: Annotated[Optional[StrictStr], Field(description="Regular expression that shall be matched by entity ids.")] = None,
        attrs: Annotated[Optional[List[StrictStr]], Field(description="List of Attributes to be matched by the Entity and included in the response. If the Entity does not have any of the Attributes in attrs, then a 404 Not Found shall be retrieved. If attrs is not specified, no matching is performed and all Attributes related to the Entity shall be retrieved.  A synonym for a combination of the pick and q parameters. DEPRECATED. Each String is an Attribute (Property or Relationship) name. ")] = None,
        pick: Annotated[Optional[List[StrictStr]], Field(description="Each String is an Entity member (\"id\", \"type\", \"scope\" or a projected Attribute name). When defined, every Entity within the payload body is reduced down to only contain  the listed Entity members. ")] = None,
        omit: Annotated[Optional[List[StrictStr]], Field(description="Each String is an Entity member (\"id\", \"type\", \"scope\" or a projected Attribute name).  When defined, the listed Entity members are removed from each Entity within the payload. ")] = None,
        q: Annotated[Optional[StrictStr], Field(description="Query as per clause 4.9. ")] = None,
        csf: Annotated[Optional[StrictStr], Field(description="Context Source filter as per clause 4.9.")] = None,
        geometry: Annotated[Optional[StrictStr], Field(description="Geometry as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present. ")] = None,
        georel: Annotated[Optional[Any], Field(description="Geo relationship as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present. ")] = None,
        coordinates: Annotated[Optional[Any], Field(description="Coordinates serialized as a string as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present. ")] = None,
        geoproperty: Annotated[Optional[StrictStr], Field(description="The name of the Property that contains the geospatial data that will be used to resolve the geoquery. By default, will be location (see clause 4.7). It shall be ignored unless a geoquery is present. ")] = None,
        timeproperty: Annotated[Optional[StrictStr], Field(description="Allowed values: \"observedAt\", \"createdAt\", \"modifiedAt\" and \"deletedAt\". If not specified, the default is \"observedAt\". (See clause 4.8) ")] = None,
        timerel: Annotated[Optional[StrictStr], Field(description="Allowed values: \"before\", \"after\", \"between\" ")] = None,
        time_at: Annotated[Optional[datetime], Field(description="It shall be a DateTime. Cardinality shall be 1 if timerel is present. String representing the timeAt parameter as defined by clause 4.11. ")] = None,
        end_time_at: Annotated[Optional[datetime], Field(description="It shall be a DateTime. Cardinality shall be 1 if timerel is equal to \"between\". String representing the endTimeAt parameter as defined by clause 4.11. ")] = None,
        last_n: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Only the last n instances, per Attribute, per Entity (under the specified time interval) shall be retrieved. ")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="It is used to reduce languageMaps to a string or string array property in a single preferred language. ")] = None,
        aggr_methods: Annotated[Optional[StrictStr], Field(description="4.5.19.1 Aggregated Temporal Representation of an Entity.  Comma separated list of aggregation methods.  Only applicable if aggregatedValues is present in the options parameter. ")] = None,
        aggr_period_duration: Annotated[Optional[StrictStr], Field(description="If not specified, it defaults to a duration of 0 seconds and is interpreted as a duration spanning the whole time range specified by the temporal query.  Only applicable if aggregatedValues is present in the options parameter. ")] = None,
        scope_q: Annotated[Optional[StrictStr], Field(description="Scope query (see clause 4.19). ")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Specifies the datasetIds of the Attribute instances to be selected for each matched Attribute as per clause 4.5.5,  or the datasetId of the dataset to be deleted. ")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="6.3.10 Pagination behaviour. It defines the limit to the number of NGSI-LD Elements that shall be retrieved at a maximum as mandated by clause 5.5.9. The value 0 is only allowed in combination with the count URI parameter. ")] = None,
        count: Annotated[Optional[StrictBool], Field(description="6.3.13 Counting number of results. If true, then a special HTTP header (NGSILD-Results-Count) is set in the response. Regardless of how many entities are actually returned (maybe due to the \"limit\" URI parameter), the total number of matching results (e.g. number of Entities) is returned. ")] = None,
        options: Optional[List[OptionsSysAttrs]] = None,
        format: Optional[FormatTemporal] = None,
        local: Annotated[Optional[StrictBool], Field(description="6.3.18 Limiting Distributed Operations. If local=true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  The parameter described in this clause limits the execution of an operation to a local Context Source  or Context Broker (clause 5.5.13). ")] = None,
        link: Annotated[Optional[StrictStr], Field(description="6.3.5 JSON-LD @context resolution  In summary, from a developer's perspective, for POST, PATCH and PUT operations, if MIME type is \"application/ld+json\", then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \"application/json\", then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header. ")] = None,
        ngsild_tenant: Annotated[Optional[StrictStr], Field(description="6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted. ")] = None,
        via: Annotated[Optional[StrictStr], Field(description="6.3.18 Limiting Distributed Operations  If present, the listing of previously encountered Context Sources supplied is used when determining  matching registrations. HTTP Via Header (IETF RFC 7230).  Any Context Broker implementation passing a distributed operation request onward to another Context Source  shall send an additional field value on the Via header field using its own unique Context Source \"hostAlias\"  (see clause 5.2.40) as the pseudonym. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Query temporal evolution of Entities 

        5.7.4 Query Temporal Evolution of Entities.  This operation allows querying the temporal evolution of Entities present in an NGSI-LD system. It is similar to the operation defined by clause 5.7.2 (Query Entities) with the addition of a temporal query.  *The query parameters timerel and timeAt are required. 

        :param id: List of entity ids to be retrieved.
        :type id: List[str]
        :param type: Selection of Entity Types as per clause 4.17. \"*\" is also allowed as a value and local is  implicitly set to true and shall not be explicitly set to false. 
        :type type: str
        :param id_pattern: Regular expression that shall be matched by entity ids.
        :type id_pattern: str
        :param attrs: List of Attributes to be matched by the Entity and included in the response. If the Entity does not have any of the Attributes in attrs, then a 404 Not Found shall be retrieved. If attrs is not specified, no matching is performed and all Attributes related to the Entity shall be retrieved.  A synonym for a combination of the pick and q parameters. DEPRECATED. Each String is an Attribute (Property or Relationship) name. 
        :type attrs: List[str]
        :param pick: Each String is an Entity member (\"id\", \"type\", \"scope\" or a projected Attribute name). When defined, every Entity within the payload body is reduced down to only contain  the listed Entity members. 
        :type pick: List[str]
        :param omit: Each String is an Entity member (\"id\", \"type\", \"scope\" or a projected Attribute name).  When defined, the listed Entity members are removed from each Entity within the payload. 
        :type omit: List[str]
        :param q: Query as per clause 4.9. 
        :type q: str
        :param csf: Context Source filter as per clause 4.9.
        :type csf: str
        :param geometry: Geometry as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present. 
        :type geometry: str
        :param georel: Geo relationship as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present. 
        :type georel: QueryEntityGeorelParameter
        :param coordinates: Coordinates serialized as a string as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present. 
        :type coordinates: QueryEntityCoordinatesParameter
        :param geoproperty: The name of the Property that contains the geospatial data that will be used to resolve the geoquery. By default, will be location (see clause 4.7). It shall be ignored unless a geoquery is present. 
        :type geoproperty: str
        :param timeproperty: Allowed values: \"observedAt\", \"createdAt\", \"modifiedAt\" and \"deletedAt\". If not specified, the default is \"observedAt\". (See clause 4.8) 
        :type timeproperty: str
        :param timerel: Allowed values: \"before\", \"after\", \"between\" 
        :type timerel: str
        :param time_at: It shall be a DateTime. Cardinality shall be 1 if timerel is present. String representing the timeAt parameter as defined by clause 4.11. 
        :type time_at: datetime
        :param end_time_at: It shall be a DateTime. Cardinality shall be 1 if timerel is equal to \"between\". String representing the endTimeAt parameter as defined by clause 4.11. 
        :type end_time_at: datetime
        :param last_n: Only the last n instances, per Attribute, per Entity (under the specified time interval) shall be retrieved. 
        :type last_n: int
        :param lang: It is used to reduce languageMaps to a string or string array property in a single preferred language. 
        :type lang: str
        :param aggr_methods: 4.5.19.1 Aggregated Temporal Representation of an Entity.  Comma separated list of aggregation methods.  Only applicable if aggregatedValues is present in the options parameter. 
        :type aggr_methods: str
        :param aggr_period_duration: If not specified, it defaults to a duration of 0 seconds and is interpreted as a duration spanning the whole time range specified by the temporal query.  Only applicable if aggregatedValues is present in the options parameter. 
        :type aggr_period_duration: str
        :param scope_q: Scope query (see clause 4.19). 
        :type scope_q: str
        :param dataset_id: Specifies the datasetIds of the Attribute instances to be selected for each matched Attribute as per clause 4.5.5,  or the datasetId of the dataset to be deleted. 
        :type dataset_id: QueryEntityDatasetIdParameter
        :param limit: 6.3.10 Pagination behaviour. It defines the limit to the number of NGSI-LD Elements that shall be retrieved at a maximum as mandated by clause 5.5.9. The value 0 is only allowed in combination with the count URI parameter. 
        :type limit: int
        :param count: 6.3.13 Counting number of results. If true, then a special HTTP header (NGSILD-Results-Count) is set in the response. Regardless of how many entities are actually returned (maybe due to the \"limit\" URI parameter), the total number of matching results (e.g. number of Entities) is returned. 
        :type count: bool
        :param options:
        :type options: List[OptionsSysAttrs]
        :param format:
        :type format: FormatTemporal
        :param local: 6.3.18 Limiting Distributed Operations. If local=true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  The parameter described in this clause limits the execution of an operation to a local Context Source  or Context Broker (clause 5.5.13). 
        :type local: bool
        :param link: 6.3.5 JSON-LD @context resolution  In summary, from a developer's perspective, for POST, PATCH and PUT operations, if MIME type is \"application/ld+json\", then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \"application/json\", then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header. 
        :type link: str
        :param ngsild_tenant: 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted. 
        :type ngsild_tenant: str
        :param via: 6.3.18 Limiting Distributed Operations  If present, the listing of previously encountered Context Sources supplied is used when determining  matching registrations. HTTP Via Header (IETF RFC 7230).  Any Context Broker implementation passing a distributed operation request onward to another Context Source  shall send an additional field value on the Via header field using its own unique Context Source \"hostAlias\"  (see clause 5.2.40) as the pseudonym. 
        :type via: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._query_temporal_serialize(
            id=id,
            type=type,
            id_pattern=id_pattern,
            attrs=attrs,
            pick=pick,
            omit=omit,
            q=q,
            csf=csf,
            geometry=geometry,
            georel=georel,
            coordinates=coordinates,
            geoproperty=geoproperty,
            timeproperty=timeproperty,
            timerel=timerel,
            time_at=time_at,
            end_time_at=end_time_at,
            last_n=last_n,
            lang=lang,
            aggr_methods=aggr_methods,
            aggr_period_duration=aggr_period_duration,
            scope_q=scope_q,
            dataset_id=dataset_id,
            limit=limit,
            count=count,
            options=options,
            format=format,
            local=local,
            link=link,
            ngsild_tenant=ngsild_tenant,
            via=via,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[QueryTemporal200ResponseInner]",
            '400': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _query_temporal_serialize(
        self,
        id,
        type,
        id_pattern,
        attrs,
        pick,
        omit,
        q,
        csf,
        geometry,
        georel,
        coordinates,
        geoproperty,
        timeproperty,
        timerel,
        time_at,
        end_time_at,
        last_n,
        lang,
        aggr_methods,
        aggr_period_duration,
        scope_q,
        dataset_id,
        limit,
        count,
        options,
        format,
        local,
        link,
        ngsild_tenant,
        via,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'id': 'csv',
            'attrs': 'csv',
            'pick': 'csv',
            'omit': 'csv',
            'options': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        if id_pattern is not None:
            
            _query_params.append(('idPattern', id_pattern))
            
        if attrs is not None:
            
            _query_params.append(('attrs', attrs))
            
        if pick is not None:
            
            _query_params.append(('pick', pick))
            
        if omit is not None:
            
            _query_params.append(('omit', omit))
            
        if q is not None:
            
            _query_params.append(('q', q))
            
        if csf is not None:
            
            _query_params.append(('csf', csf))
            
        if geometry is not None:
            
            _query_params.append(('geometry', geometry))
            
        if georel is not None:
            
            _query_params.append(('georel', georel))
            
        if coordinates is not None:
            
            _query_params.append(('coordinates', coordinates))
            
        if geoproperty is not None:
            
            _query_params.append(('geoproperty', geoproperty))
            
        if timeproperty is not None:
            
            _query_params.append(('timeproperty', timeproperty))
            
        if timerel is not None:
            
            _query_params.append(('timerel', timerel))
            
        if time_at is not None:
            if isinstance(time_at, datetime):
                _query_params.append(
                    (
                        'timeAt',
                        time_at.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('timeAt', time_at))
            
        if end_time_at is not None:
            if isinstance(end_time_at, datetime):
                _query_params.append(
                    (
                        'endTimeAt',
                        end_time_at.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('endTimeAt', end_time_at))
            
        if last_n is not None:
            
            _query_params.append(('lastN', last_n))
            
        if lang is not None:
            
            _query_params.append(('lang', lang))
            
        if aggr_methods is not None:
            
            _query_params.append(('aggrMethods', aggr_methods))
            
        if aggr_period_duration is not None:
            
            _query_params.append(('aggrPeriodDuration', aggr_period_duration))
            
        if scope_q is not None:
            
            _query_params.append(('scopeQ', scope_q))
            
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        if options is not None:
            
            _query_params.append(('options', options))
            
        if format is not None:
            
            _query_params.append(('format', format.value))
            
        if local is not None:
            
            _query_params.append(('local', local))
            
        # process the header parameters
        if link is not None:
            _header_params['Link'] = link
        if ngsild_tenant is not None:
            _header_params['NGSILD-Tenant'] = ngsild_tenant
        if via is not None:
            _header_params['Via'] = via
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/json+ld'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/temporal/entities',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def retrieve_temporal(
        self,
        entity_id: Annotated[StrictStr, Field(description="Id (URI) of the Entity to be retrieved, updated or deleted.")],
        attrs: Annotated[Optional[List[StrictStr]], Field(description="List of Attributes to be matched by the Entity and included in the response. If the Entity does not have any of the Attributes in attrs, then a 404 Not Found shall be retrieved. If attrs is not specified, no matching is performed and all Attributes related to the Entity shall be retrieved.  A synonym for a combination of the pick and q parameters. DEPRECATED. Each String is an Attribute (Property or Relationship) name. ")] = None,
        pick: Annotated[Optional[List[StrictStr]], Field(description="Each String is an Entity member (\"id\", \"type\", \"scope\" or a projected Attribute name). When defined, every Entity within the payload body is reduced down to only contain  the listed Entity members. ")] = None,
        omit: Annotated[Optional[List[StrictStr]], Field(description="Each String is an Entity member (\"id\", \"type\", \"scope\" or a projected Attribute name).  When defined, the listed Entity members are removed from each Entity within the payload. ")] = None,
        timeproperty: Annotated[Optional[StrictStr], Field(description="Allowed values: \"observedAt\", \"createdAt\", \"modifiedAt\" and \"deletedAt\". If not specified, the default is \"observedAt\". (See clause 4.8) ")] = None,
        timerel: Annotated[Optional[StrictStr], Field(description="Allowed values: \"before\", \"after\", \"between\" ")] = None,
        time_at: Annotated[Optional[datetime], Field(description="It shall be a DateTime. Cardinality shall be 1 if timerel is present. String representing the timeAt parameter as defined by clause 4.11. ")] = None,
        end_time_at: Annotated[Optional[datetime], Field(description="It shall be a DateTime. Cardinality shall be 1 if timerel is equal to \"between\". String representing the endTimeAt parameter as defined by clause 4.11. ")] = None,
        last_n: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Only the last n instances, per Attribute, per Entity (under the specified time interval) shall be retrieved. ")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="It is used to reduce languageMaps to a string or string array property in a single preferred language. ")] = None,
        aggr_methods: Annotated[Optional[StrictStr], Field(description="4.5.19.1 Aggregated Temporal Representation of an Entity.  Comma separated list of aggregation methods.  Only applicable if aggregatedValues is present in the options parameter. ")] = None,
        aggr_period_duration: Annotated[Optional[StrictStr], Field(description="If not specified, it defaults to a duration of 0 seconds and is interpreted as a duration spanning the whole time range specified by the temporal query.  Only applicable if aggregatedValues is present in the options parameter. ")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Specifies the datasetIds of the Attribute instances to be selected for each matched Attribute as per clause 4.5.5,  or the datasetId of the dataset to be deleted. ")] = None,
        options: Optional[List[OptionsSysAttrs]] = None,
        format: Optional[FormatTemporal] = None,
        local: Annotated[Optional[StrictBool], Field(description="6.3.18 Limiting Distributed Operations. If local=true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  The parameter described in this clause limits the execution of an operation to a local Context Source  or Context Broker (clause 5.5.13). ")] = None,
        link: Annotated[Optional[StrictStr], Field(description="6.3.5 JSON-LD @context resolution  In summary, from a developer's perspective, for POST, PATCH and PUT operations, if MIME type is \"application/ld+json\", then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \"application/json\", then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header. ")] = None,
        ngsild_tenant: Annotated[Optional[StrictStr], Field(description="6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted. ")] = None,
        via: Annotated[Optional[StrictStr], Field(description="6.3.18 Limiting Distributed Operations  If present, the listing of previously encountered Context Sources supplied is used when determining  matching registrations. HTTP Via Header (IETF RFC 7230).  Any Context Broker implementation passing a distributed operation request onward to another Context Source  shall send an additional field value on the Via header field using its own unique Context Source \"hostAlias\"  (see clause 5.2.40) as the pseudonym. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> QueryTemporal200ResponseInner:
        """Temporal Representation of Entity retrieval by id 

        5.7.3 Retrieve Temporal Evolution of an Entity.  This operation allows retrieving the temporal evolution of an NGSI-LD Entity. 

        :param entity_id: Id (URI) of the Entity to be retrieved, updated or deleted. (required)
        :type entity_id: str
        :param attrs: List of Attributes to be matched by the Entity and included in the response. If the Entity does not have any of the Attributes in attrs, then a 404 Not Found shall be retrieved. If attrs is not specified, no matching is performed and all Attributes related to the Entity shall be retrieved.  A synonym for a combination of the pick and q parameters. DEPRECATED. Each String is an Attribute (Property or Relationship) name. 
        :type attrs: List[str]
        :param pick: Each String is an Entity member (\"id\", \"type\", \"scope\" or a projected Attribute name). When defined, every Entity within the payload body is reduced down to only contain  the listed Entity members. 
        :type pick: List[str]
        :param omit: Each String is an Entity member (\"id\", \"type\", \"scope\" or a projected Attribute name).  When defined, the listed Entity members are removed from each Entity within the payload. 
        :type omit: List[str]
        :param timeproperty: Allowed values: \"observedAt\", \"createdAt\", \"modifiedAt\" and \"deletedAt\". If not specified, the default is \"observedAt\". (See clause 4.8) 
        :type timeproperty: str
        :param timerel: Allowed values: \"before\", \"after\", \"between\" 
        :type timerel: str
        :param time_at: It shall be a DateTime. Cardinality shall be 1 if timerel is present. String representing the timeAt parameter as defined by clause 4.11. 
        :type time_at: datetime
        :param end_time_at: It shall be a DateTime. Cardinality shall be 1 if timerel is equal to \"between\". String representing the endTimeAt parameter as defined by clause 4.11. 
        :type end_time_at: datetime
        :param last_n: Only the last n instances, per Attribute, per Entity (under the specified time interval) shall be retrieved. 
        :type last_n: int
        :param lang: It is used to reduce languageMaps to a string or string array property in a single preferred language. 
        :type lang: str
        :param aggr_methods: 4.5.19.1 Aggregated Temporal Representation of an Entity.  Comma separated list of aggregation methods.  Only applicable if aggregatedValues is present in the options parameter. 
        :type aggr_methods: str
        :param aggr_period_duration: If not specified, it defaults to a duration of 0 seconds and is interpreted as a duration spanning the whole time range specified by the temporal query.  Only applicable if aggregatedValues is present in the options parameter. 
        :type aggr_period_duration: str
        :param dataset_id: Specifies the datasetIds of the Attribute instances to be selected for each matched Attribute as per clause 4.5.5,  or the datasetId of the dataset to be deleted. 
        :type dataset_id: QueryEntityDatasetIdParameter
        :param options:
        :type options: List[OptionsSysAttrs]
        :param format:
        :type format: FormatTemporal
        :param local: 6.3.18 Limiting Distributed Operations. If local=true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  The parameter described in this clause limits the execution of an operation to a local Context Source  or Context Broker (clause 5.5.13). 
        :type local: bool
        :param link: 6.3.5 JSON-LD @context resolution  In summary, from a developer's perspective, for POST, PATCH and PUT operations, if MIME type is \"application/ld+json\", then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \"application/json\", then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header. 
        :type link: str
        :param ngsild_tenant: 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted. 
        :type ngsild_tenant: str
        :param via: 6.3.18 Limiting Distributed Operations  If present, the listing of previously encountered Context Sources supplied is used when determining  matching registrations. HTTP Via Header (IETF RFC 7230).  Any Context Broker implementation passing a distributed operation request onward to another Context Source  shall send an additional field value on the Via header field using its own unique Context Source \"hostAlias\"  (see clause 5.2.40) as the pseudonym. 
        :type via: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retrieve_temporal_serialize(
            entity_id=entity_id,
            attrs=attrs,
            pick=pick,
            omit=omit,
            timeproperty=timeproperty,
            timerel=timerel,
            time_at=time_at,
            end_time_at=end_time_at,
            last_n=last_n,
            lang=lang,
            aggr_methods=aggr_methods,
            aggr_period_duration=aggr_period_duration,
            dataset_id=dataset_id,
            options=options,
            format=format,
            local=local,
            link=link,
            ngsild_tenant=ngsild_tenant,
            via=via,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryTemporal200ResponseInner",
            '400': "ProblemDetails",
            '404': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def retrieve_temporal_with_http_info(
        self,
        entity_id: Annotated[StrictStr, Field(description="Id (URI) of the Entity to be retrieved, updated or deleted.")],
        attrs: Annotated[Optional[List[StrictStr]], Field(description="List of Attributes to be matched by the Entity and included in the response. If the Entity does not have any of the Attributes in attrs, then a 404 Not Found shall be retrieved. If attrs is not specified, no matching is performed and all Attributes related to the Entity shall be retrieved.  A synonym for a combination of the pick and q parameters. DEPRECATED. Each String is an Attribute (Property or Relationship) name. ")] = None,
        pick: Annotated[Optional[List[StrictStr]], Field(description="Each String is an Entity member (\"id\", \"type\", \"scope\" or a projected Attribute name). When defined, every Entity within the payload body is reduced down to only contain  the listed Entity members. ")] = None,
        omit: Annotated[Optional[List[StrictStr]], Field(description="Each String is an Entity member (\"id\", \"type\", \"scope\" or a projected Attribute name).  When defined, the listed Entity members are removed from each Entity within the payload. ")] = None,
        timeproperty: Annotated[Optional[StrictStr], Field(description="Allowed values: \"observedAt\", \"createdAt\", \"modifiedAt\" and \"deletedAt\". If not specified, the default is \"observedAt\". (See clause 4.8) ")] = None,
        timerel: Annotated[Optional[StrictStr], Field(description="Allowed values: \"before\", \"after\", \"between\" ")] = None,
        time_at: Annotated[Optional[datetime], Field(description="It shall be a DateTime. Cardinality shall be 1 if timerel is present. String representing the timeAt parameter as defined by clause 4.11. ")] = None,
        end_time_at: Annotated[Optional[datetime], Field(description="It shall be a DateTime. Cardinality shall be 1 if timerel is equal to \"between\". String representing the endTimeAt parameter as defined by clause 4.11. ")] = None,
        last_n: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Only the last n instances, per Attribute, per Entity (under the specified time interval) shall be retrieved. ")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="It is used to reduce languageMaps to a string or string array property in a single preferred language. ")] = None,
        aggr_methods: Annotated[Optional[StrictStr], Field(description="4.5.19.1 Aggregated Temporal Representation of an Entity.  Comma separated list of aggregation methods.  Only applicable if aggregatedValues is present in the options parameter. ")] = None,
        aggr_period_duration: Annotated[Optional[StrictStr], Field(description="If not specified, it defaults to a duration of 0 seconds and is interpreted as a duration spanning the whole time range specified by the temporal query.  Only applicable if aggregatedValues is present in the options parameter. ")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Specifies the datasetIds of the Attribute instances to be selected for each matched Attribute as per clause 4.5.5,  or the datasetId of the dataset to be deleted. ")] = None,
        options: Optional[List[OptionsSysAttrs]] = None,
        format: Optional[FormatTemporal] = None,
        local: Annotated[Optional[StrictBool], Field(description="6.3.18 Limiting Distributed Operations. If local=true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  The parameter described in this clause limits the execution of an operation to a local Context Source  or Context Broker (clause 5.5.13). ")] = None,
        link: Annotated[Optional[StrictStr], Field(description="6.3.5 JSON-LD @context resolution  In summary, from a developer's perspective, for POST, PATCH and PUT operations, if MIME type is \"application/ld+json\", then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \"application/json\", then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header. ")] = None,
        ngsild_tenant: Annotated[Optional[StrictStr], Field(description="6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted. ")] = None,
        via: Annotated[Optional[StrictStr], Field(description="6.3.18 Limiting Distributed Operations  If present, the listing of previously encountered Context Sources supplied is used when determining  matching registrations. HTTP Via Header (IETF RFC 7230).  Any Context Broker implementation passing a distributed operation request onward to another Context Source  shall send an additional field value on the Via header field using its own unique Context Source \"hostAlias\"  (see clause 5.2.40) as the pseudonym. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[QueryTemporal200ResponseInner]:
        """Temporal Representation of Entity retrieval by id 

        5.7.3 Retrieve Temporal Evolution of an Entity.  This operation allows retrieving the temporal evolution of an NGSI-LD Entity. 

        :param entity_id: Id (URI) of the Entity to be retrieved, updated or deleted. (required)
        :type entity_id: str
        :param attrs: List of Attributes to be matched by the Entity and included in the response. If the Entity does not have any of the Attributes in attrs, then a 404 Not Found shall be retrieved. If attrs is not specified, no matching is performed and all Attributes related to the Entity shall be retrieved.  A synonym for a combination of the pick and q parameters. DEPRECATED. Each String is an Attribute (Property or Relationship) name. 
        :type attrs: List[str]
        :param pick: Each String is an Entity member (\"id\", \"type\", \"scope\" or a projected Attribute name). When defined, every Entity within the payload body is reduced down to only contain  the listed Entity members. 
        :type pick: List[str]
        :param omit: Each String is an Entity member (\"id\", \"type\", \"scope\" or a projected Attribute name).  When defined, the listed Entity members are removed from each Entity within the payload. 
        :type omit: List[str]
        :param timeproperty: Allowed values: \"observedAt\", \"createdAt\", \"modifiedAt\" and \"deletedAt\". If not specified, the default is \"observedAt\". (See clause 4.8) 
        :type timeproperty: str
        :param timerel: Allowed values: \"before\", \"after\", \"between\" 
        :type timerel: str
        :param time_at: It shall be a DateTime. Cardinality shall be 1 if timerel is present. String representing the timeAt parameter as defined by clause 4.11. 
        :type time_at: datetime
        :param end_time_at: It shall be a DateTime. Cardinality shall be 1 if timerel is equal to \"between\". String representing the endTimeAt parameter as defined by clause 4.11. 
        :type end_time_at: datetime
        :param last_n: Only the last n instances, per Attribute, per Entity (under the specified time interval) shall be retrieved. 
        :type last_n: int
        :param lang: It is used to reduce languageMaps to a string or string array property in a single preferred language. 
        :type lang: str
        :param aggr_methods: 4.5.19.1 Aggregated Temporal Representation of an Entity.  Comma separated list of aggregation methods.  Only applicable if aggregatedValues is present in the options parameter. 
        :type aggr_methods: str
        :param aggr_period_duration: If not specified, it defaults to a duration of 0 seconds and is interpreted as a duration spanning the whole time range specified by the temporal query.  Only applicable if aggregatedValues is present in the options parameter. 
        :type aggr_period_duration: str
        :param dataset_id: Specifies the datasetIds of the Attribute instances to be selected for each matched Attribute as per clause 4.5.5,  or the datasetId of the dataset to be deleted. 
        :type dataset_id: QueryEntityDatasetIdParameter
        :param options:
        :type options: List[OptionsSysAttrs]
        :param format:
        :type format: FormatTemporal
        :param local: 6.3.18 Limiting Distributed Operations. If local=true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  The parameter described in this clause limits the execution of an operation to a local Context Source  or Context Broker (clause 5.5.13). 
        :type local: bool
        :param link: 6.3.5 JSON-LD @context resolution  In summary, from a developer's perspective, for POST, PATCH and PUT operations, if MIME type is \"application/ld+json\", then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \"application/json\", then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header. 
        :type link: str
        :param ngsild_tenant: 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted. 
        :type ngsild_tenant: str
        :param via: 6.3.18 Limiting Distributed Operations  If present, the listing of previously encountered Context Sources supplied is used when determining  matching registrations. HTTP Via Header (IETF RFC 7230).  Any Context Broker implementation passing a distributed operation request onward to another Context Source  shall send an additional field value on the Via header field using its own unique Context Source \"hostAlias\"  (see clause 5.2.40) as the pseudonym. 
        :type via: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retrieve_temporal_serialize(
            entity_id=entity_id,
            attrs=attrs,
            pick=pick,
            omit=omit,
            timeproperty=timeproperty,
            timerel=timerel,
            time_at=time_at,
            end_time_at=end_time_at,
            last_n=last_n,
            lang=lang,
            aggr_methods=aggr_methods,
            aggr_period_duration=aggr_period_duration,
            dataset_id=dataset_id,
            options=options,
            format=format,
            local=local,
            link=link,
            ngsild_tenant=ngsild_tenant,
            via=via,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryTemporal200ResponseInner",
            '400': "ProblemDetails",
            '404': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def retrieve_temporal_without_preload_content(
        self,
        entity_id: Annotated[StrictStr, Field(description="Id (URI) of the Entity to be retrieved, updated or deleted.")],
        attrs: Annotated[Optional[List[StrictStr]], Field(description="List of Attributes to be matched by the Entity and included in the response. If the Entity does not have any of the Attributes in attrs, then a 404 Not Found shall be retrieved. If attrs is not specified, no matching is performed and all Attributes related to the Entity shall be retrieved.  A synonym for a combination of the pick and q parameters. DEPRECATED. Each String is an Attribute (Property or Relationship) name. ")] = None,
        pick: Annotated[Optional[List[StrictStr]], Field(description="Each String is an Entity member (\"id\", \"type\", \"scope\" or a projected Attribute name). When defined, every Entity within the payload body is reduced down to only contain  the listed Entity members. ")] = None,
        omit: Annotated[Optional[List[StrictStr]], Field(description="Each String is an Entity member (\"id\", \"type\", \"scope\" or a projected Attribute name).  When defined, the listed Entity members are removed from each Entity within the payload. ")] = None,
        timeproperty: Annotated[Optional[StrictStr], Field(description="Allowed values: \"observedAt\", \"createdAt\", \"modifiedAt\" and \"deletedAt\". If not specified, the default is \"observedAt\". (See clause 4.8) ")] = None,
        timerel: Annotated[Optional[StrictStr], Field(description="Allowed values: \"before\", \"after\", \"between\" ")] = None,
        time_at: Annotated[Optional[datetime], Field(description="It shall be a DateTime. Cardinality shall be 1 if timerel is present. String representing the timeAt parameter as defined by clause 4.11. ")] = None,
        end_time_at: Annotated[Optional[datetime], Field(description="It shall be a DateTime. Cardinality shall be 1 if timerel is equal to \"between\". String representing the endTimeAt parameter as defined by clause 4.11. ")] = None,
        last_n: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Only the last n instances, per Attribute, per Entity (under the specified time interval) shall be retrieved. ")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="It is used to reduce languageMaps to a string or string array property in a single preferred language. ")] = None,
        aggr_methods: Annotated[Optional[StrictStr], Field(description="4.5.19.1 Aggregated Temporal Representation of an Entity.  Comma separated list of aggregation methods.  Only applicable if aggregatedValues is present in the options parameter. ")] = None,
        aggr_period_duration: Annotated[Optional[StrictStr], Field(description="If not specified, it defaults to a duration of 0 seconds and is interpreted as a duration spanning the whole time range specified by the temporal query.  Only applicable if aggregatedValues is present in the options parameter. ")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Specifies the datasetIds of the Attribute instances to be selected for each matched Attribute as per clause 4.5.5,  or the datasetId of the dataset to be deleted. ")] = None,
        options: Optional[List[OptionsSysAttrs]] = None,
        format: Optional[FormatTemporal] = None,
        local: Annotated[Optional[StrictBool], Field(description="6.3.18 Limiting Distributed Operations. If local=true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  The parameter described in this clause limits the execution of an operation to a local Context Source  or Context Broker (clause 5.5.13). ")] = None,
        link: Annotated[Optional[StrictStr], Field(description="6.3.5 JSON-LD @context resolution  In summary, from a developer's perspective, for POST, PATCH and PUT operations, if MIME type is \"application/ld+json\", then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \"application/json\", then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header. ")] = None,
        ngsild_tenant: Annotated[Optional[StrictStr], Field(description="6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted. ")] = None,
        via: Annotated[Optional[StrictStr], Field(description="6.3.18 Limiting Distributed Operations  If present, the listing of previously encountered Context Sources supplied is used when determining  matching registrations. HTTP Via Header (IETF RFC 7230).  Any Context Broker implementation passing a distributed operation request onward to another Context Source  shall send an additional field value on the Via header field using its own unique Context Source \"hostAlias\"  (see clause 5.2.40) as the pseudonym. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Temporal Representation of Entity retrieval by id 

        5.7.3 Retrieve Temporal Evolution of an Entity.  This operation allows retrieving the temporal evolution of an NGSI-LD Entity. 

        :param entity_id: Id (URI) of the Entity to be retrieved, updated or deleted. (required)
        :type entity_id: str
        :param attrs: List of Attributes to be matched by the Entity and included in the response. If the Entity does not have any of the Attributes in attrs, then a 404 Not Found shall be retrieved. If attrs is not specified, no matching is performed and all Attributes related to the Entity shall be retrieved.  A synonym for a combination of the pick and q parameters. DEPRECATED. Each String is an Attribute (Property or Relationship) name. 
        :type attrs: List[str]
        :param pick: Each String is an Entity member (\"id\", \"type\", \"scope\" or a projected Attribute name). When defined, every Entity within the payload body is reduced down to only contain  the listed Entity members. 
        :type pick: List[str]
        :param omit: Each String is an Entity member (\"id\", \"type\", \"scope\" or a projected Attribute name).  When defined, the listed Entity members are removed from each Entity within the payload. 
        :type omit: List[str]
        :param timeproperty: Allowed values: \"observedAt\", \"createdAt\", \"modifiedAt\" and \"deletedAt\". If not specified, the default is \"observedAt\". (See clause 4.8) 
        :type timeproperty: str
        :param timerel: Allowed values: \"before\", \"after\", \"between\" 
        :type timerel: str
        :param time_at: It shall be a DateTime. Cardinality shall be 1 if timerel is present. String representing the timeAt parameter as defined by clause 4.11. 
        :type time_at: datetime
        :param end_time_at: It shall be a DateTime. Cardinality shall be 1 if timerel is equal to \"between\". String representing the endTimeAt parameter as defined by clause 4.11. 
        :type end_time_at: datetime
        :param last_n: Only the last n instances, per Attribute, per Entity (under the specified time interval) shall be retrieved. 
        :type last_n: int
        :param lang: It is used to reduce languageMaps to a string or string array property in a single preferred language. 
        :type lang: str
        :param aggr_methods: 4.5.19.1 Aggregated Temporal Representation of an Entity.  Comma separated list of aggregation methods.  Only applicable if aggregatedValues is present in the options parameter. 
        :type aggr_methods: str
        :param aggr_period_duration: If not specified, it defaults to a duration of 0 seconds and is interpreted as a duration spanning the whole time range specified by the temporal query.  Only applicable if aggregatedValues is present in the options parameter. 
        :type aggr_period_duration: str
        :param dataset_id: Specifies the datasetIds of the Attribute instances to be selected for each matched Attribute as per clause 4.5.5,  or the datasetId of the dataset to be deleted. 
        :type dataset_id: QueryEntityDatasetIdParameter
        :param options:
        :type options: List[OptionsSysAttrs]
        :param format:
        :type format: FormatTemporal
        :param local: 6.3.18 Limiting Distributed Operations. If local=true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  The parameter described in this clause limits the execution of an operation to a local Context Source  or Context Broker (clause 5.5.13). 
        :type local: bool
        :param link: 6.3.5 JSON-LD @context resolution  In summary, from a developer's perspective, for POST, PATCH and PUT operations, if MIME type is \"application/ld+json\", then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \"application/json\", then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header. 
        :type link: str
        :param ngsild_tenant: 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted. 
        :type ngsild_tenant: str
        :param via: 6.3.18 Limiting Distributed Operations  If present, the listing of previously encountered Context Sources supplied is used when determining  matching registrations. HTTP Via Header (IETF RFC 7230).  Any Context Broker implementation passing a distributed operation request onward to another Context Source  shall send an additional field value on the Via header field using its own unique Context Source \"hostAlias\"  (see clause 5.2.40) as the pseudonym. 
        :type via: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retrieve_temporal_serialize(
            entity_id=entity_id,
            attrs=attrs,
            pick=pick,
            omit=omit,
            timeproperty=timeproperty,
            timerel=timerel,
            time_at=time_at,
            end_time_at=end_time_at,
            last_n=last_n,
            lang=lang,
            aggr_methods=aggr_methods,
            aggr_period_duration=aggr_period_duration,
            dataset_id=dataset_id,
            options=options,
            format=format,
            local=local,
            link=link,
            ngsild_tenant=ngsild_tenant,
            via=via,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryTemporal200ResponseInner",
            '400': "ProblemDetails",
            '404': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _retrieve_temporal_serialize(
        self,
        entity_id,
        attrs,
        pick,
        omit,
        timeproperty,
        timerel,
        time_at,
        end_time_at,
        last_n,
        lang,
        aggr_methods,
        aggr_period_duration,
        dataset_id,
        options,
        format,
        local,
        link,
        ngsild_tenant,
        via,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'attrs': 'csv',
            'pick': 'csv',
            'omit': 'csv',
            'options': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if entity_id is not None:
            _path_params['entityId'] = entity_id
        # process the query parameters
        if attrs is not None:
            
            _query_params.append(('attrs', attrs))
            
        if pick is not None:
            
            _query_params.append(('pick', pick))
            
        if omit is not None:
            
            _query_params.append(('omit', omit))
            
        if timeproperty is not None:
            
            _query_params.append(('timeproperty', timeproperty))
            
        if timerel is not None:
            
            _query_params.append(('timerel', timerel))
            
        if time_at is not None:
            if isinstance(time_at, datetime):
                _query_params.append(
                    (
                        'timeAt',
                        time_at.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('timeAt', time_at))
            
        if end_time_at is not None:
            if isinstance(end_time_at, datetime):
                _query_params.append(
                    (
                        'endTimeAt',
                        end_time_at.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('endTimeAt', end_time_at))
            
        if last_n is not None:
            
            _query_params.append(('lastN', last_n))
            
        if lang is not None:
            
            _query_params.append(('lang', lang))
            
        if aggr_methods is not None:
            
            _query_params.append(('aggrMethods', aggr_methods))
            
        if aggr_period_duration is not None:
            
            _query_params.append(('aggrPeriodDuration', aggr_period_duration))
            
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id))
            
        if options is not None:
            
            _query_params.append(('options', options))
            
        if format is not None:
            
            _query_params.append(('format', format.value))
            
        if local is not None:
            
            _query_params.append(('local', local))
            
        # process the header parameters
        if link is not None:
            _header_params['Link'] = link
        if ngsild_tenant is not None:
            _header_params['NGSILD-Tenant'] = ngsild_tenant
        if via is not None:
            _header_params['Via'] = via
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/json+ld'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/temporal/entities/{entityId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def temporal_query_batch(
        self,
        local: Annotated[Optional[StrictBool], Field(description="6.3.18 Limiting Distributed Operations. If local=true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  The parameter described in this clause limits the execution of an operation to a local Context Source  or Context Broker (clause 5.5.13). ")] = None,
        link: Annotated[Optional[StrictStr], Field(description="6.3.5 JSON-LD @context resolution  In summary, from a developer's perspective, for POST, PATCH and PUT operations, if MIME type is \"application/ld+json\", then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \"application/json\", then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header. ")] = None,
        ngsild_tenant: Annotated[Optional[StrictStr], Field(description="6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted. ")] = None,
        via: Annotated[Optional[StrictStr], Field(description="6.3.18 Limiting Distributed Operations  If present, the listing of previously encountered Context Sources supplied is used when determining  matching registrations. HTTP Via Header (IETF RFC 7230).  Any Context Broker implementation passing a distributed operation request onward to another Context Source  shall send an additional field value on the Via header field using its own unique Context Source \"hostAlias\"  (see clause 5.2.40) as the pseudonym. ")] = None,
        query_temporal: Optional[QueryTemporal] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[QueryTemporal200ResponseInner]:
        """Temporal Representation of Entity Query based on POST 

        5.7.4 Query Temporal Evolution of Entities.  This operation allows querying the temporal evolution of Entities present in an NGSI-LD system. It is similar to the operation defined by clause 5.7.2 (Query Entities) with the addition of a temporal query. 

        :param local: 6.3.18 Limiting Distributed Operations. If local=true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  The parameter described in this clause limits the execution of an operation to a local Context Source  or Context Broker (clause 5.5.13). 
        :type local: bool
        :param link: 6.3.5 JSON-LD @context resolution  In summary, from a developer's perspective, for POST, PATCH and PUT operations, if MIME type is \"application/ld+json\", then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \"application/json\", then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header. 
        :type link: str
        :param ngsild_tenant: 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted. 
        :type ngsild_tenant: str
        :param via: 6.3.18 Limiting Distributed Operations  If present, the listing of previously encountered Context Sources supplied is used when determining  matching registrations. HTTP Via Header (IETF RFC 7230).  Any Context Broker implementation passing a distributed operation request onward to another Context Source  shall send an additional field value on the Via header field using its own unique Context Source \"hostAlias\"  (see clause 5.2.40) as the pseudonym. 
        :type via: str
        :param query_temporal:
        :type query_temporal: QueryTemporal
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._temporal_query_batch_serialize(
            local=local,
            link=link,
            ngsild_tenant=ngsild_tenant,
            via=via,
            query_temporal=query_temporal,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[QueryTemporal200ResponseInner]",
            '400': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def temporal_query_batch_with_http_info(
        self,
        local: Annotated[Optional[StrictBool], Field(description="6.3.18 Limiting Distributed Operations. If local=true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  The parameter described in this clause limits the execution of an operation to a local Context Source  or Context Broker (clause 5.5.13). ")] = None,
        link: Annotated[Optional[StrictStr], Field(description="6.3.5 JSON-LD @context resolution  In summary, from a developer's perspective, for POST, PATCH and PUT operations, if MIME type is \"application/ld+json\", then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \"application/json\", then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header. ")] = None,
        ngsild_tenant: Annotated[Optional[StrictStr], Field(description="6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted. ")] = None,
        via: Annotated[Optional[StrictStr], Field(description="6.3.18 Limiting Distributed Operations  If present, the listing of previously encountered Context Sources supplied is used when determining  matching registrations. HTTP Via Header (IETF RFC 7230).  Any Context Broker implementation passing a distributed operation request onward to another Context Source  shall send an additional field value on the Via header field using its own unique Context Source \"hostAlias\"  (see clause 5.2.40) as the pseudonym. ")] = None,
        query_temporal: Optional[QueryTemporal] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[QueryTemporal200ResponseInner]]:
        """Temporal Representation of Entity Query based on POST 

        5.7.4 Query Temporal Evolution of Entities.  This operation allows querying the temporal evolution of Entities present in an NGSI-LD system. It is similar to the operation defined by clause 5.7.2 (Query Entities) with the addition of a temporal query. 

        :param local: 6.3.18 Limiting Distributed Operations. If local=true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  The parameter described in this clause limits the execution of an operation to a local Context Source  or Context Broker (clause 5.5.13). 
        :type local: bool
        :param link: 6.3.5 JSON-LD @context resolution  In summary, from a developer's perspective, for POST, PATCH and PUT operations, if MIME type is \"application/ld+json\", then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \"application/json\", then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header. 
        :type link: str
        :param ngsild_tenant: 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted. 
        :type ngsild_tenant: str
        :param via: 6.3.18 Limiting Distributed Operations  If present, the listing of previously encountered Context Sources supplied is used when determining  matching registrations. HTTP Via Header (IETF RFC 7230).  Any Context Broker implementation passing a distributed operation request onward to another Context Source  shall send an additional field value on the Via header field using its own unique Context Source \"hostAlias\"  (see clause 5.2.40) as the pseudonym. 
        :type via: str
        :param query_temporal:
        :type query_temporal: QueryTemporal
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._temporal_query_batch_serialize(
            local=local,
            link=link,
            ngsild_tenant=ngsild_tenant,
            via=via,
            query_temporal=query_temporal,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[QueryTemporal200ResponseInner]",
            '400': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def temporal_query_batch_without_preload_content(
        self,
        local: Annotated[Optional[StrictBool], Field(description="6.3.18 Limiting Distributed Operations. If local=true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  The parameter described in this clause limits the execution of an operation to a local Context Source  or Context Broker (clause 5.5.13). ")] = None,
        link: Annotated[Optional[StrictStr], Field(description="6.3.5 JSON-LD @context resolution  In summary, from a developer's perspective, for POST, PATCH and PUT operations, if MIME type is \"application/ld+json\", then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \"application/json\", then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header. ")] = None,
        ngsild_tenant: Annotated[Optional[StrictStr], Field(description="6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted. ")] = None,
        via: Annotated[Optional[StrictStr], Field(description="6.3.18 Limiting Distributed Operations  If present, the listing of previously encountered Context Sources supplied is used when determining  matching registrations. HTTP Via Header (IETF RFC 7230).  Any Context Broker implementation passing a distributed operation request onward to another Context Source  shall send an additional field value on the Via header field using its own unique Context Source \"hostAlias\"  (see clause 5.2.40) as the pseudonym. ")] = None,
        query_temporal: Optional[QueryTemporal] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Temporal Representation of Entity Query based on POST 

        5.7.4 Query Temporal Evolution of Entities.  This operation allows querying the temporal evolution of Entities present in an NGSI-LD system. It is similar to the operation defined by clause 5.7.2 (Query Entities) with the addition of a temporal query. 

        :param local: 6.3.18 Limiting Distributed Operations. If local=true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  The parameter described in this clause limits the execution of an operation to a local Context Source  or Context Broker (clause 5.5.13). 
        :type local: bool
        :param link: 6.3.5 JSON-LD @context resolution  In summary, from a developer's perspective, for POST, PATCH and PUT operations, if MIME type is \"application/ld+json\", then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \"application/json\", then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header. 
        :type link: str
        :param ngsild_tenant: 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted. 
        :type ngsild_tenant: str
        :param via: 6.3.18 Limiting Distributed Operations  If present, the listing of previously encountered Context Sources supplied is used when determining  matching registrations. HTTP Via Header (IETF RFC 7230).  Any Context Broker implementation passing a distributed operation request onward to another Context Source  shall send an additional field value on the Via header field using its own unique Context Source \"hostAlias\"  (see clause 5.2.40) as the pseudonym. 
        :type via: str
        :param query_temporal:
        :type query_temporal: QueryTemporal
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._temporal_query_batch_serialize(
            local=local,
            link=link,
            ngsild_tenant=ngsild_tenant,
            via=via,
            query_temporal=query_temporal,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[QueryTemporal200ResponseInner]",
            '400': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _temporal_query_batch_serialize(
        self,
        local,
        link,
        ngsild_tenant,
        via,
        query_temporal,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if local is not None:
            
            _query_params.append(('local', local))
            
        # process the header parameters
        if link is not None:
            _header_params['Link'] = link
        if ngsild_tenant is not None:
            _header_params['NGSILD-Tenant'] = ngsild_tenant
        if via is not None:
            _header_params['Via'] = via
        # process the form parameters
        # process the body parameter
        if query_temporal is not None:
            _body_params = query_temporal


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/json+ld'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/json+ld'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/temporal/entityOperations/query',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


