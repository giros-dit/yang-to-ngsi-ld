# coding: utf-8

"""
    NGSI-LD OAS

    OpenAPI Specification for NGSI-LD API.

    The version of the OpenAPI document: 1.8.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from ngsi_ld_models_1_8_1.models.ld_context_metadata_inner import LdContextMetadataInner
from ngsi_ld_models_1_8_1.models.retrieve_context200_response_one_of import RetrieveContext200ResponseOneOf
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

RETRIEVECONTEXT200RESPONSE_ONE_OF_SCHEMAS = ["List[LdContextMetadataInner]", "RetrieveContext200ResponseOneOf"]

class RetrieveContext200Response(BaseModel):
    """
    RetrieveContext200Response
    """
    # data type: RetrieveContext200ResponseOneOf
    oneof_schema_1_validator: Optional[RetrieveContext200ResponseOneOf] = None
    # data type: List[LdContextMetadataInner]
    oneof_schema_2_validator: Optional[List[LdContextMetadataInner]] = Field(default=None, description="JSON object which represents information (metadata) about an @context currently stored by the Broker as defined in 5.13.3.5. It contains information about the @context's original URL (if any), its local identifier in the Broker's storage, its kind (\"Cached\", \"Hosted\" and \"ImplicitlyCreated\"), its creation timestamp, its expiry date (if \"Cached\"), and additional optional information. ")
    actual_instance: Optional[Union[List[LdContextMetadataInner], RetrieveContext200ResponseOneOf]] = None
    one_of_schemas: Set[str] = { "List[LdContextMetadataInner]", "RetrieveContext200ResponseOneOf" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = RetrieveContext200Response.model_construct()
        error_messages = []
        match = 0
        # validate data type: RetrieveContext200ResponseOneOf
        if not isinstance(v, RetrieveContext200ResponseOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RetrieveContext200ResponseOneOf`")
        else:
            match += 1
        # validate data type: List[LdContextMetadataInner]
        try:
            instance.oneof_schema_2_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in RetrieveContext200Response with oneOf schemas: List[LdContextMetadataInner], RetrieveContext200ResponseOneOf. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in RetrieveContext200Response with oneOf schemas: List[LdContextMetadataInner], RetrieveContext200ResponseOneOf. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into RetrieveContext200ResponseOneOf
        try:
            instance.actual_instance = RetrieveContext200ResponseOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[LdContextMetadataInner]
        try:
            # validation
            instance.oneof_schema_2_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_2_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into RetrieveContext200Response with oneOf schemas: List[LdContextMetadataInner], RetrieveContext200ResponseOneOf. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into RetrieveContext200Response with oneOf schemas: List[LdContextMetadataInner], RetrieveContext200ResponseOneOf. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], List[LdContextMetadataInner], RetrieveContext200ResponseOneOf]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


