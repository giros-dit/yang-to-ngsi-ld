# coding: utf-8

"""
    Schemas for NETCONF client using data materialization approach

    Schemas for NETCONF client using data materialization approach compliant with the NGSI-LD OAS metamodel according to ETSI GS CIM 009. 

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from ngsi_ld_models_netconf_client_data_materialization.models.geo_property import GeoProperty
from ngsi_ld_models_netconf_client_data_materialization.models.model_property import ModelProperty
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

ENTITYVALUE_ONE_OF_SCHEMAS = ["GeoProperty", "JsonProperty", "LanguageProperty", "ListProperty", "ListRelationship", "List[GeoProperty]", "List[JsonProperty]", "List[LanguageProperty]", "List[ListProperty]", "List[ListRelationship]", "List[ModelProperty]", "List[Relationship]", "List[VocabProperty]", "ModelProperty", "Relationship", "VocabProperty"]

class EntityValue(BaseModel):
    """
    EntityValue
    """
    # data type: ModelProperty
    oneof_schema_1_validator: Optional[ModelProperty] = None
    # data type: List[ModelProperty]
    oneof_schema_2_validator: Optional[List[ModelProperty]] = None
    # data type: GeoProperty
    oneof_schema_3_validator: Optional[GeoProperty] = None
    # data type: List[GeoProperty]
    oneof_schema_4_validator: Optional[List[GeoProperty]] = None
    # data type: LanguageProperty
    oneof_schema_5_validator: Optional[LanguageProperty] = None
    # data type: List[LanguageProperty]
    oneof_schema_6_validator: Optional[List[LanguageProperty]] = None
    # data type: VocabProperty
    oneof_schema_7_validator: Optional[VocabProperty] = None
    # data type: List[VocabProperty]
    oneof_schema_8_validator: Optional[List[VocabProperty]] = None
    # data type: JsonProperty
    oneof_schema_9_validator: Optional[JsonProperty] = None
    # data type: List[JsonProperty]
    oneof_schema_10_validator: Optional[List[JsonProperty]] = None
    # data type: ListProperty
    oneof_schema_11_validator: Optional[ListProperty] = None
    # data type: List[ListProperty]
    oneof_schema_12_validator: Optional[List[ListProperty]] = None
    # data type: Relationship
    oneof_schema_13_validator: Optional[Relationship] = None
    # data type: List[Relationship]
    oneof_schema_14_validator: Optional[List[Relationship]] = None
    # data type: ListRelationship
    oneof_schema_15_validator: Optional[ListRelationship] = None
    # data type: List[ListRelationship]
    oneof_schema_16_validator: Optional[List[ListRelationship]] = None
    actual_instance: Optional[Union[GeoProperty, JsonProperty, LanguageProperty, ListProperty, ListRelationship, List[GeoProperty], List[JsonProperty], List[LanguageProperty], List[ListProperty], List[ListRelationship], List[ModelProperty], List[Relationship], List[VocabProperty], ModelProperty, Relationship, VocabProperty]] = None
    one_of_schemas: Set[str] = { "GeoProperty", "JsonProperty", "LanguageProperty", "ListProperty", "ListRelationship", "List[GeoProperty]", "List[JsonProperty]", "List[LanguageProperty]", "List[ListProperty]", "List[ListRelationship]", "List[ModelProperty]", "List[Relationship]", "List[VocabProperty]", "ModelProperty", "Relationship", "VocabProperty" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = EntityValue.model_construct()
        error_messages = []
        match = 0
        # validate data type: ModelProperty
        if not isinstance(v, ModelProperty):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ModelProperty`")
        else:
            match += 1
        # validate data type: List[ModelProperty]
        try:
            instance.oneof_schema_2_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: GeoProperty
        if not isinstance(v, GeoProperty):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GeoProperty`")
        else:
            match += 1
        # validate data type: List[GeoProperty]
        try:
            instance.oneof_schema_4_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: LanguageProperty
        if not isinstance(v, LanguageProperty):
            error_messages.append(f"Error! Input type `{type(v)}` is not `LanguageProperty`")
        else:
            match += 1
        # validate data type: List[LanguageProperty]
        try:
            instance.oneof_schema_6_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: VocabProperty
        if not isinstance(v, VocabProperty):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VocabProperty`")
        else:
            match += 1
        # validate data type: List[VocabProperty]
        try:
            instance.oneof_schema_8_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: JsonProperty
        if not isinstance(v, JsonProperty):
            error_messages.append(f"Error! Input type `{type(v)}` is not `JsonProperty`")
        else:
            match += 1
        # validate data type: List[JsonProperty]
        try:
            instance.oneof_schema_10_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: ListProperty
        if not isinstance(v, ListProperty):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListProperty`")
        else:
            match += 1
        # validate data type: List[ListProperty]
        try:
            instance.oneof_schema_12_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: Relationship
        if not isinstance(v, Relationship):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Relationship`")
        else:
            match += 1
        # validate data type: List[Relationship]
        try:
            instance.oneof_schema_14_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: ListRelationship
        if not isinstance(v, ListRelationship):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListRelationship`")
        else:
            match += 1
        # validate data type: List[ListRelationship]
        try:
            instance.oneof_schema_16_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in EntityValue with oneOf schemas: GeoProperty, JsonProperty, LanguageProperty, ListProperty, ListRelationship, List[GeoProperty], List[JsonProperty], List[LanguageProperty], List[ListProperty], List[ListRelationship], List[ModelProperty], List[Relationship], List[VocabProperty], ModelProperty, Relationship, VocabProperty. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in EntityValue with oneOf schemas: GeoProperty, JsonProperty, LanguageProperty, ListProperty, ListRelationship, List[GeoProperty], List[JsonProperty], List[LanguageProperty], List[ListProperty], List[ListRelationship], List[ModelProperty], List[Relationship], List[VocabProperty], ModelProperty, Relationship, VocabProperty. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into ModelProperty
        try:
            instance.actual_instance = ModelProperty.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[ModelProperty]
        try:
            # validation
            instance.oneof_schema_2_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_2_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GeoProperty
        try:
            instance.actual_instance = GeoProperty.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[GeoProperty]
        try:
            # validation
            instance.oneof_schema_4_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_4_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into LanguageProperty
        try:
            instance.actual_instance = LanguageProperty.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[LanguageProperty]
        try:
            # validation
            instance.oneof_schema_6_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_6_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into VocabProperty
        try:
            instance.actual_instance = VocabProperty.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[VocabProperty]
        try:
            # validation
            instance.oneof_schema_8_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_8_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into JsonProperty
        try:
            instance.actual_instance = JsonProperty.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[JsonProperty]
        try:
            # validation
            instance.oneof_schema_10_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_10_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListProperty
        try:
            instance.actual_instance = ListProperty.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[ListProperty]
        try:
            # validation
            instance.oneof_schema_12_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_12_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Relationship
        try:
            instance.actual_instance = Relationship.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[Relationship]
        try:
            # validation
            instance.oneof_schema_14_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_14_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListRelationship
        try:
            instance.actual_instance = ListRelationship.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[ListRelationship]
        try:
            # validation
            instance.oneof_schema_16_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_16_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into EntityValue with oneOf schemas: GeoProperty, JsonProperty, LanguageProperty, ListProperty, ListRelationship, List[GeoProperty], List[JsonProperty], List[LanguageProperty], List[ListProperty], List[ListRelationship], List[ModelProperty], List[Relationship], List[VocabProperty], ModelProperty, Relationship, VocabProperty. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into EntityValue with oneOf schemas: GeoProperty, JsonProperty, LanguageProperty, ListProperty, ListRelationship, List[GeoProperty], List[JsonProperty], List[LanguageProperty], List[ListProperty], List[ListRelationship], List[ModelProperty], List[Relationship], List[VocabProperty], ModelProperty, Relationship, VocabProperty. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], GeoProperty, JsonProperty, LanguageProperty, ListProperty, ListRelationship, List[GeoProperty], List[JsonProperty], List[LanguageProperty], List[ListProperty], List[ListRelationship], List[ModelProperty], List[Relationship], List[VocabProperty], ModelProperty, Relationship, VocabProperty]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


