# coding: utf-8

"""
    OpenAPI schemas for YANG data models srl_nokia-interfaces.yang, srl_nokia-common.yang, srl_nokia-features.yang, srl_nokia-if-ip.yang, srl_nokia-extensions.yang, srl_nokia-interfaces-bridge-table.yang, srl_nokia-interfaces-bridge-table-statistics.yang, srl_nokia-platform.yang, srl_nokia-platform-lc.yang, srl_nokia-platform-pipeline-counters.yang.

    OpenAPI schemas for YANG data models compliant with the NGSI-LD OAS V1.6.1 metamodel according to ETSI GS CIM 009 V1.6.1.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from ngsi_ld_models.models.entity_scope import EntityScope
from ngsi_ld_models.models.geo_property import GeoProperty
from ngsi_ld_models.models.in1024b_to1518b_frames import In1024bTo1518bFrames
from ngsi_ld_models.models.in128b_to255b_frames import In128bTo255bFrames
from ngsi_ld_models.models.in1519b_or_longer_frames import In1519bOrLongerFrames
from ngsi_ld_models.models.in256b_to511b_frames import In256bTo511bFrames
from ngsi_ld_models.models.in512b_to1023b_frames import In512bTo1023bFrames
from ngsi_ld_models.models.in64b_frames import In64bFrames
from ngsi_ld_models.models.in65b_to127b_frames import In65bTo127bFrames
from ngsi_ld_models.models.in_crc_error_frames import InCrcErrorFrames
from ngsi_ld_models.models.in_fragment_frames import InFragmentFrames
from ngsi_ld_models.models.in_jabber_frames import InJabberFrames
from ngsi_ld_models.models.in_mac_pause_frames import InMacPauseFrames
from ngsi_ld_models.models.in_oversize_frames import InOversizeFrames
from ngsi_ld_models.models.interface_ethernet_statistics_last_clear import InterfaceEthernetStatisticsLastClear
from ngsi_ld_models.models.is_part_of import IsPartOf
from ngsi_ld_models.models.out1024b_to1518b_frames import Out1024bTo1518bFrames
from ngsi_ld_models.models.out128b_to255b_frames import Out128bTo255bFrames
from ngsi_ld_models.models.out1519b_or_longer_frames import Out1519bOrLongerFrames
from ngsi_ld_models.models.out256b_to511b_frames import Out256bTo511bFrames
from ngsi_ld_models.models.out512b_to1023b_frames import Out512bTo1023bFrames
from ngsi_ld_models.models.out64b_frames import Out64bFrames
from ngsi_ld_models.models.out65b_to127b_frames import Out65bTo127bFrames
from ngsi_ld_models.models.out_mac_pause_frames import OutMacPauseFrames
from typing import Optional, Set
from typing_extensions import Self

class InterfaceEthernetStatistics(BaseModel):
    """
     YANG module: srl_nokia-interfaces.yang 
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Entity id. ")
    type: StrictStr = Field(description="NGSI-LD Entity identifier. It has to be InterfaceEthernetStatistics.")
    scope: Optional[EntityScope] = None
    location: Optional[GeoProperty] = None
    observation_space: Optional[GeoProperty] = Field(default=None, alias="observationSpace")
    operation_space: Optional[GeoProperty] = Field(default=None, alias="operationSpace")
    created_at: Optional[datetime] = Field(default=None, description="Is defined as the temporal Property at which the Entity, Property or Relationship was entered into an NGSI-LD system. ", alias="createdAt")
    modified_at: Optional[datetime] = Field(default=None, description="Is defined as the temporal Property at which the Entity, Property or Relationship was last modified in an NGSI-LD system, e.g. in order to correct a previously entered incorrect value. ", alias="modifiedAt")
    deleted_at: Optional[datetime] = Field(default=None, description="Is defined as the temporal Property at which the Entity, Property or Relationship was deleted from an NGSI-LD system.  Entity deletion timestamp. See clause 4.8 It is only used in notifications reporting deletions and in the Temporal Representation of Entities (clause 4.5.6), Properties (clause 4.5.7), Relationships (clause 4.5.8) and LanguageProperties (clause 5.2.32). ", alias="deletedAt")
    in_mac_pause_frames: Optional[InMacPauseFrames] = Field(default=None, alias="inMacPauseFrames")
    in_oversize_frames: Optional[InOversizeFrames] = Field(default=None, alias="inOversizeFrames")
    in_jabber_frames: Optional[InJabberFrames] = Field(default=None, alias="inJabberFrames")
    in_fragment_frames: Optional[InFragmentFrames] = Field(default=None, alias="inFragmentFrames")
    in_crc_error_frames: Optional[InCrcErrorFrames] = Field(default=None, alias="inCrcErrorFrames")
    out_mac_pause_frames: Optional[OutMacPauseFrames] = Field(default=None, alias="outMacPauseFrames")
    in64b_frames: Optional[In64bFrames] = Field(default=None, alias="in64bFrames")
    in65b_to127b_frames: Optional[In65bTo127bFrames] = Field(default=None, alias="in65bTo127bFrames")
    in128b_to255b_frames: Optional[In128bTo255bFrames] = Field(default=None, alias="in128bTo255bFrames")
    in256b_to511b_frames: Optional[In256bTo511bFrames] = Field(default=None, alias="in256bTo511bFrames")
    in512b_to1023b_frames: Optional[In512bTo1023bFrames] = Field(default=None, alias="in512bTo1023bFrames")
    in1024b_to1518b_frames: Optional[In1024bTo1518bFrames] = Field(default=None, alias="in1024bTo1518bFrames")
    in1519b_or_longer_frames: Optional[In1519bOrLongerFrames] = Field(default=None, alias="in1519bOrLongerFrames")
    out64b_frames: Optional[Out64bFrames] = Field(default=None, alias="out64bFrames")
    out65b_to127b_frames: Optional[Out65bTo127bFrames] = Field(default=None, alias="out65bTo127bFrames")
    out128b_to255b_frames: Optional[Out128bTo255bFrames] = Field(default=None, alias="out128bTo255bFrames")
    out256b_to511b_frames: Optional[Out256bTo511bFrames] = Field(default=None, alias="out256bTo511bFrames")
    out512b_to1023b_frames: Optional[Out512bTo1023bFrames] = Field(default=None, alias="out512bTo1023bFrames")
    out1024b_to1518b_frames: Optional[Out1024bTo1518bFrames] = Field(default=None, alias="out1024bTo1518bFrames")
    out1519b_or_longer_frames: Optional[Out1519bOrLongerFrames] = Field(default=None, alias="out1519bOrLongerFrames")
    last_clear: Optional[InterfaceEthernetStatisticsLastClear] = Field(default=None, alias="lastClear")
    is_part_of: IsPartOf = Field(alias="isPartOf")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "type", "scope", "location", "observationSpace", "operationSpace", "createdAt", "modifiedAt", "deletedAt", "inMacPauseFrames", "inOversizeFrames", "inJabberFrames", "inFragmentFrames", "inCrcErrorFrames", "outMacPauseFrames", "in64bFrames", "in65bTo127bFrames", "in128bTo255bFrames", "in256bTo511bFrames", "in512bTo1023bFrames", "in1024bTo1518bFrames", "in1519bOrLongerFrames", "out64bFrames", "out65bTo127bFrames", "out128bTo255bFrames", "out256bTo511bFrames", "out512bTo1023bFrames", "out1024bTo1518bFrames", "out1519bOrLongerFrames", "lastClear", "isPartOf"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('InterfaceEthernetStatistics'):
            raise ValueError("must be one of enum values ('InterfaceEthernetStatistics')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InterfaceEthernetStatistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "modified_at",
            "deleted_at",
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of scope
        if self.scope:
            _dict['scope'] = self.scope.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of observation_space
        if self.observation_space:
            _dict['observationSpace'] = self.observation_space.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operation_space
        if self.operation_space:
            _dict['operationSpace'] = self.operation_space.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_mac_pause_frames
        if self.in_mac_pause_frames:
            _dict['inMacPauseFrames'] = self.in_mac_pause_frames.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_oversize_frames
        if self.in_oversize_frames:
            _dict['inOversizeFrames'] = self.in_oversize_frames.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_jabber_frames
        if self.in_jabber_frames:
            _dict['inJabberFrames'] = self.in_jabber_frames.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_fragment_frames
        if self.in_fragment_frames:
            _dict['inFragmentFrames'] = self.in_fragment_frames.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_crc_error_frames
        if self.in_crc_error_frames:
            _dict['inCrcErrorFrames'] = self.in_crc_error_frames.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out_mac_pause_frames
        if self.out_mac_pause_frames:
            _dict['outMacPauseFrames'] = self.out_mac_pause_frames.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in64b_frames
        if self.in64b_frames:
            _dict['in64bFrames'] = self.in64b_frames.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in65b_to127b_frames
        if self.in65b_to127b_frames:
            _dict['in65bTo127bFrames'] = self.in65b_to127b_frames.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in128b_to255b_frames
        if self.in128b_to255b_frames:
            _dict['in128bTo255bFrames'] = self.in128b_to255b_frames.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in256b_to511b_frames
        if self.in256b_to511b_frames:
            _dict['in256bTo511bFrames'] = self.in256b_to511b_frames.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in512b_to1023b_frames
        if self.in512b_to1023b_frames:
            _dict['in512bTo1023bFrames'] = self.in512b_to1023b_frames.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in1024b_to1518b_frames
        if self.in1024b_to1518b_frames:
            _dict['in1024bTo1518bFrames'] = self.in1024b_to1518b_frames.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in1519b_or_longer_frames
        if self.in1519b_or_longer_frames:
            _dict['in1519bOrLongerFrames'] = self.in1519b_or_longer_frames.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out64b_frames
        if self.out64b_frames:
            _dict['out64bFrames'] = self.out64b_frames.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out65b_to127b_frames
        if self.out65b_to127b_frames:
            _dict['out65bTo127bFrames'] = self.out65b_to127b_frames.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out128b_to255b_frames
        if self.out128b_to255b_frames:
            _dict['out128bTo255bFrames'] = self.out128b_to255b_frames.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out256b_to511b_frames
        if self.out256b_to511b_frames:
            _dict['out256bTo511bFrames'] = self.out256b_to511b_frames.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out512b_to1023b_frames
        if self.out512b_to1023b_frames:
            _dict['out512bTo1023bFrames'] = self.out512b_to1023b_frames.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out1024b_to1518b_frames
        if self.out1024b_to1518b_frames:
            _dict['out1024bTo1518bFrames'] = self.out1024b_to1518b_frames.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out1519b_or_longer_frames
        if self.out1519b_or_longer_frames:
            _dict['out1519bOrLongerFrames'] = self.out1519b_or_longer_frames.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_clear
        if self.last_clear:
            _dict['lastClear'] = self.last_clear.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_part_of
        if self.is_part_of:
            _dict['isPartOf'] = self.is_part_of.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InterfaceEthernetStatistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type") if obj.get("type") is not None else 'InterfaceEthernetStatistics',
            "scope": EntityScope.from_dict(obj["scope"]) if obj.get("scope") is not None else None,
            "location": GeoProperty.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "observationSpace": GeoProperty.from_dict(obj["observationSpace"]) if obj.get("observationSpace") is not None else None,
            "operationSpace": GeoProperty.from_dict(obj["operationSpace"]) if obj.get("operationSpace") is not None else None,
            "createdAt": obj.get("createdAt"),
            "modifiedAt": obj.get("modifiedAt"),
            "deletedAt": obj.get("deletedAt"),
            "inMacPauseFrames": InMacPauseFrames.from_dict(obj["inMacPauseFrames"]) if obj.get("inMacPauseFrames") is not None else None,
            "inOversizeFrames": InOversizeFrames.from_dict(obj["inOversizeFrames"]) if obj.get("inOversizeFrames") is not None else None,
            "inJabberFrames": InJabberFrames.from_dict(obj["inJabberFrames"]) if obj.get("inJabberFrames") is not None else None,
            "inFragmentFrames": InFragmentFrames.from_dict(obj["inFragmentFrames"]) if obj.get("inFragmentFrames") is not None else None,
            "inCrcErrorFrames": InCrcErrorFrames.from_dict(obj["inCrcErrorFrames"]) if obj.get("inCrcErrorFrames") is not None else None,
            "outMacPauseFrames": OutMacPauseFrames.from_dict(obj["outMacPauseFrames"]) if obj.get("outMacPauseFrames") is not None else None,
            "in64bFrames": In64bFrames.from_dict(obj["in64bFrames"]) if obj.get("in64bFrames") is not None else None,
            "in65bTo127bFrames": In65bTo127bFrames.from_dict(obj["in65bTo127bFrames"]) if obj.get("in65bTo127bFrames") is not None else None,
            "in128bTo255bFrames": In128bTo255bFrames.from_dict(obj["in128bTo255bFrames"]) if obj.get("in128bTo255bFrames") is not None else None,
            "in256bTo511bFrames": In256bTo511bFrames.from_dict(obj["in256bTo511bFrames"]) if obj.get("in256bTo511bFrames") is not None else None,
            "in512bTo1023bFrames": In512bTo1023bFrames.from_dict(obj["in512bTo1023bFrames"]) if obj.get("in512bTo1023bFrames") is not None else None,
            "in1024bTo1518bFrames": In1024bTo1518bFrames.from_dict(obj["in1024bTo1518bFrames"]) if obj.get("in1024bTo1518bFrames") is not None else None,
            "in1519bOrLongerFrames": In1519bOrLongerFrames.from_dict(obj["in1519bOrLongerFrames"]) if obj.get("in1519bOrLongerFrames") is not None else None,
            "out64bFrames": Out64bFrames.from_dict(obj["out64bFrames"]) if obj.get("out64bFrames") is not None else None,
            "out65bTo127bFrames": Out65bTo127bFrames.from_dict(obj["out65bTo127bFrames"]) if obj.get("out65bTo127bFrames") is not None else None,
            "out128bTo255bFrames": Out128bTo255bFrames.from_dict(obj["out128bTo255bFrames"]) if obj.get("out128bTo255bFrames") is not None else None,
            "out256bTo511bFrames": Out256bTo511bFrames.from_dict(obj["out256bTo511bFrames"]) if obj.get("out256bTo511bFrames") is not None else None,
            "out512bTo1023bFrames": Out512bTo1023bFrames.from_dict(obj["out512bTo1023bFrames"]) if obj.get("out512bTo1023bFrames") is not None else None,
            "out1024bTo1518bFrames": Out1024bTo1518bFrames.from_dict(obj["out1024bTo1518bFrames"]) if obj.get("out1024bTo1518bFrames") is not None else None,
            "out1519bOrLongerFrames": Out1519bOrLongerFrames.from_dict(obj["out1519bOrLongerFrames"]) if obj.get("out1519bOrLongerFrames") is not None else None,
            "lastClear": InterfaceEthernetStatisticsLastClear.from_dict(obj["lastClear"]) if obj.get("lastClear") is not None else None,
            "isPartOf": IsPartOf.from_dict(obj["isPartOf"]) if obj.get("isPartOf") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


