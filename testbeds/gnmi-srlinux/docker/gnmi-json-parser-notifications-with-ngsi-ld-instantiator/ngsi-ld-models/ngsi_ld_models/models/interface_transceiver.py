# coding: utf-8

"""
    OpenAPI schemas for YANG data models srl_nokia-interfaces.yang, srl_nokia-common.yang, srl_nokia-features.yang, srl_nokia-if-ip.yang, srl_nokia-extensions.yang, srl_nokia-interfaces-bridge-table.yang, srl_nokia-interfaces-bridge-table-statistics.yang, srl_nokia-platform.yang, srl_nokia-platform-lc.yang, srl_nokia-platform-pipeline-counters.yang.

    OpenAPI schemas for YANG data models compliant with the NGSI-LD OAS V1.6.1 metamodel according to ETSI GS CIM 009 V1.6.1.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from ngsi_ld_models.models.connector_type import ConnectorType
from ngsi_ld_models.models.date_code import DateCode
from ngsi_ld_models.models.ddm_events import DdmEvents
from ngsi_ld_models.models.entity_scope import EntityScope
from ngsi_ld_models.models.ethernet_pmd import EthernetPmd
from ngsi_ld_models.models.fault_condition import FaultCondition
from ngsi_ld_models.models.form_factor import FormFactor
from ngsi_ld_models.models.forward_error_correction import ForwardErrorCorrection
from ngsi_ld_models.models.functional_type import FunctionalType
from ngsi_ld_models.models.geo_property import GeoProperty
from ngsi_ld_models.models.interface_transceiver_oper_down_reason import InterfaceTransceiverOperDownReason
from ngsi_ld_models.models.interface_transceiver_oper_state import InterfaceTransceiverOperState
from ngsi_ld_models.models.interface_transceiver_serial_number import InterfaceTransceiverSerialNumber
from ngsi_ld_models.models.interface_transceiver_vendor_part_number import InterfaceTransceiverVendorPartNumber
from ngsi_ld_models.models.interface_transceiver_wavelength import InterfaceTransceiverWavelength
from ngsi_ld_models.models.is_part_of import IsPartOf
from ngsi_ld_models.models.tx_laser import TxLaser
from ngsi_ld_models.models.vendor import Vendor
from ngsi_ld_models.models.vendor_lot_number import VendorLotNumber
from ngsi_ld_models.models.vendor_revision import VendorRevision
from typing import Optional, Set
from typing_extensions import Self

class InterfaceTransceiver(BaseModel):
    """
     YANG module: srl_nokia-interfaces.yang 
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Entity id. ")
    type: StrictStr = Field(description="NGSI-LD Entity identifier. It has to be InterfaceTransceiver.")
    scope: Optional[EntityScope] = None
    location: Optional[GeoProperty] = None
    observation_space: Optional[GeoProperty] = Field(default=None, alias="observationSpace")
    operation_space: Optional[GeoProperty] = Field(default=None, alias="operationSpace")
    created_at: Optional[datetime] = Field(default=None, description="Is defined as the temporal Property at which the Entity, Property or Relationship was entered into an NGSI-LD system. ", alias="createdAt")
    modified_at: Optional[datetime] = Field(default=None, description="Is defined as the temporal Property at which the Entity, Property or Relationship was last modified in an NGSI-LD system, e.g. in order to correct a previously entered incorrect value. ", alias="modifiedAt")
    deleted_at: Optional[datetime] = Field(default=None, description="Is defined as the temporal Property at which the Entity, Property or Relationship was deleted from an NGSI-LD system.  Entity deletion timestamp. See clause 4.8 It is only used in notifications reporting deletions and in the Temporal Representation of Entities (clause 4.5.6), Properties (clause 4.5.7), Relationships (clause 4.5.8) and LanguageProperties (clause 5.2.32). ", alias="deletedAt")
    tx_laser: Optional[TxLaser] = Field(default=None, alias="txLaser")
    oper_state: Optional[InterfaceTransceiverOperState] = Field(default=None, alias="operState")
    oper_down_reason: Optional[InterfaceTransceiverOperDownReason] = Field(default=None, alias="operDownReason")
    ddm_events: Optional[DdmEvents] = Field(default=None, alias="ddmEvents")
    forward_error_correction: Optional[ForwardErrorCorrection] = Field(default=None, alias="forwardErrorCorrection")
    form_factor: Optional[FormFactor] = Field(default=None, alias="formFactor")
    functional_type: Optional[FunctionalType] = Field(default=None, alias="functionalType")
    ethernet_pmd: Optional[EthernetPmd] = Field(default=None, alias="ethernetPmd")
    connector_type: Optional[ConnectorType] = Field(default=None, alias="connectorType")
    vendor: Optional[Vendor] = None
    vendor_part_number: Optional[InterfaceTransceiverVendorPartNumber] = Field(default=None, alias="vendorPartNumber")
    vendor_revision: Optional[VendorRevision] = Field(default=None, alias="vendorRevision")
    vendor_lot_number: Optional[VendorLotNumber] = Field(default=None, alias="vendorLotNumber")
    serial_number: Optional[InterfaceTransceiverSerialNumber] = Field(default=None, alias="serialNumber")
    date_code: Optional[DateCode] = Field(default=None, alias="dateCode")
    fault_condition: Optional[FaultCondition] = Field(default=None, alias="faultCondition")
    wavelength: Optional[InterfaceTransceiverWavelength] = None
    is_part_of: IsPartOf = Field(alias="isPartOf")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "type", "scope", "location", "observationSpace", "operationSpace", "createdAt", "modifiedAt", "deletedAt", "txLaser", "operState", "operDownReason", "ddmEvents", "forwardErrorCorrection", "formFactor", "functionalType", "ethernetPmd", "connectorType", "vendor", "vendorPartNumber", "vendorRevision", "vendorLotNumber", "serialNumber", "dateCode", "faultCondition", "wavelength", "isPartOf"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('InterfaceTransceiver'):
            raise ValueError("must be one of enum values ('InterfaceTransceiver')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InterfaceTransceiver from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "modified_at",
            "deleted_at",
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of scope
        if self.scope:
            _dict['scope'] = self.scope.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of observation_space
        if self.observation_space:
            _dict['observationSpace'] = self.observation_space.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operation_space
        if self.operation_space:
            _dict['operationSpace'] = self.operation_space.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tx_laser
        if self.tx_laser:
            _dict['txLaser'] = self.tx_laser.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oper_state
        if self.oper_state:
            _dict['operState'] = self.oper_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oper_down_reason
        if self.oper_down_reason:
            _dict['operDownReason'] = self.oper_down_reason.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ddm_events
        if self.ddm_events:
            _dict['ddmEvents'] = self.ddm_events.to_dict()
        # override the default output from pydantic by calling `to_dict()` of forward_error_correction
        if self.forward_error_correction:
            _dict['forwardErrorCorrection'] = self.forward_error_correction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of form_factor
        if self.form_factor:
            _dict['formFactor'] = self.form_factor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of functional_type
        if self.functional_type:
            _dict['functionalType'] = self.functional_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ethernet_pmd
        if self.ethernet_pmd:
            _dict['ethernetPmd'] = self.ethernet_pmd.to_dict()
        # override the default output from pydantic by calling `to_dict()` of connector_type
        if self.connector_type:
            _dict['connectorType'] = self.connector_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vendor
        if self.vendor:
            _dict['vendor'] = self.vendor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vendor_part_number
        if self.vendor_part_number:
            _dict['vendorPartNumber'] = self.vendor_part_number.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vendor_revision
        if self.vendor_revision:
            _dict['vendorRevision'] = self.vendor_revision.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vendor_lot_number
        if self.vendor_lot_number:
            _dict['vendorLotNumber'] = self.vendor_lot_number.to_dict()
        # override the default output from pydantic by calling `to_dict()` of serial_number
        if self.serial_number:
            _dict['serialNumber'] = self.serial_number.to_dict()
        # override the default output from pydantic by calling `to_dict()` of date_code
        if self.date_code:
            _dict['dateCode'] = self.date_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fault_condition
        if self.fault_condition:
            _dict['faultCondition'] = self.fault_condition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wavelength
        if self.wavelength:
            _dict['wavelength'] = self.wavelength.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_part_of
        if self.is_part_of:
            _dict['isPartOf'] = self.is_part_of.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InterfaceTransceiver from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type") if obj.get("type") is not None else 'InterfaceTransceiver',
            "scope": EntityScope.from_dict(obj["scope"]) if obj.get("scope") is not None else None,
            "location": GeoProperty.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "observationSpace": GeoProperty.from_dict(obj["observationSpace"]) if obj.get("observationSpace") is not None else None,
            "operationSpace": GeoProperty.from_dict(obj["operationSpace"]) if obj.get("operationSpace") is not None else None,
            "createdAt": obj.get("createdAt"),
            "modifiedAt": obj.get("modifiedAt"),
            "deletedAt": obj.get("deletedAt"),
            "txLaser": TxLaser.from_dict(obj["txLaser"]) if obj.get("txLaser") is not None else None,
            "operState": InterfaceTransceiverOperState.from_dict(obj["operState"]) if obj.get("operState") is not None else None,
            "operDownReason": InterfaceTransceiverOperDownReason.from_dict(obj["operDownReason"]) if obj.get("operDownReason") is not None else None,
            "ddmEvents": DdmEvents.from_dict(obj["ddmEvents"]) if obj.get("ddmEvents") is not None else None,
            "forwardErrorCorrection": ForwardErrorCorrection.from_dict(obj["forwardErrorCorrection"]) if obj.get("forwardErrorCorrection") is not None else None,
            "formFactor": FormFactor.from_dict(obj["formFactor"]) if obj.get("formFactor") is not None else None,
            "functionalType": FunctionalType.from_dict(obj["functionalType"]) if obj.get("functionalType") is not None else None,
            "ethernetPmd": EthernetPmd.from_dict(obj["ethernetPmd"]) if obj.get("ethernetPmd") is not None else None,
            "connectorType": ConnectorType.from_dict(obj["connectorType"]) if obj.get("connectorType") is not None else None,
            "vendor": Vendor.from_dict(obj["vendor"]) if obj.get("vendor") is not None else None,
            "vendorPartNumber": InterfaceTransceiverVendorPartNumber.from_dict(obj["vendorPartNumber"]) if obj.get("vendorPartNumber") is not None else None,
            "vendorRevision": VendorRevision.from_dict(obj["vendorRevision"]) if obj.get("vendorRevision") is not None else None,
            "vendorLotNumber": VendorLotNumber.from_dict(obj["vendorLotNumber"]) if obj.get("vendorLotNumber") is not None else None,
            "serialNumber": InterfaceTransceiverSerialNumber.from_dict(obj["serialNumber"]) if obj.get("serialNumber") is not None else None,
            "dateCode": DateCode.from_dict(obj["dateCode"]) if obj.get("dateCode") is not None else None,
            "faultCondition": FaultCondition.from_dict(obj["faultCondition"]) if obj.get("faultCondition") is not None else None,
            "wavelength": InterfaceTransceiverWavelength.from_dict(obj["wavelength"]) if obj.get("wavelength") is not None else None,
            "isPartOf": IsPartOf.from_dict(obj["isPartOf"]) if obj.get("isPartOf") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


