# coding: utf-8

"""
    OpenAPI schemas for YANG data models srl_nokia-interfaces.yang, srl_nokia-common.yang, srl_nokia-features.yang, srl_nokia-if-ip.yang, srl_nokia-extensions.yang, srl_nokia-interfaces-bridge-table.yang, srl_nokia-interfaces-bridge-table-statistics.yang, srl_nokia-platform.yang, srl_nokia-platform-lc.yang, srl_nokia-platform-pipeline-counters.yang.

    OpenAPI schemas for YANG data models compliant with the NGSI-LD OAS V1.6.1 metamodel according to ETSI GS CIM 009 V1.6.1.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from ngsi_ld_models.models.entity_scope import EntityScope
from ngsi_ld_models.models.geo_property import GeoProperty
from ngsi_ld_models.models.interface_subinterface_ipv6_statistics_in_discarded_packets import InterfaceSubinterfaceIpv6StatisticsInDiscardedPackets
from ngsi_ld_models.models.interface_subinterface_ipv6_statistics_in_error_packets import InterfaceSubinterfaceIpv6StatisticsInErrorPackets
from ngsi_ld_models.models.interface_subinterface_ipv6_statistics_in_forwarded_octets import InterfaceSubinterfaceIpv6StatisticsInForwardedOctets
from ngsi_ld_models.models.interface_subinterface_ipv6_statistics_in_forwarded_packets import InterfaceSubinterfaceIpv6StatisticsInForwardedPackets
from ngsi_ld_models.models.interface_subinterface_ipv6_statistics_in_matched_ra_packets import InterfaceSubinterfaceIpv6StatisticsInMatchedRaPackets
from ngsi_ld_models.models.interface_subinterface_ipv6_statistics_in_octets import InterfaceSubinterfaceIpv6StatisticsInOctets
from ngsi_ld_models.models.interface_subinterface_ipv6_statistics_in_packets import InterfaceSubinterfaceIpv6StatisticsInPackets
from ngsi_ld_models.models.interface_subinterface_ipv6_statistics_in_terminated_octets import InterfaceSubinterfaceIpv6StatisticsInTerminatedOctets
from ngsi_ld_models.models.interface_subinterface_ipv6_statistics_in_terminated_packets import InterfaceSubinterfaceIpv6StatisticsInTerminatedPackets
from ngsi_ld_models.models.interface_subinterface_ipv6_statistics_last_clear import InterfaceSubinterfaceIpv6StatisticsLastClear
from ngsi_ld_models.models.interface_subinterface_ipv6_statistics_out_discarded_packets import InterfaceSubinterfaceIpv6StatisticsOutDiscardedPackets
from ngsi_ld_models.models.interface_subinterface_ipv6_statistics_out_error_packets import InterfaceSubinterfaceIpv6StatisticsOutErrorPackets
from ngsi_ld_models.models.interface_subinterface_ipv6_statistics_out_forwarded_octets import InterfaceSubinterfaceIpv6StatisticsOutForwardedOctets
from ngsi_ld_models.models.interface_subinterface_ipv6_statistics_out_forwarded_packets import InterfaceSubinterfaceIpv6StatisticsOutForwardedPackets
from ngsi_ld_models.models.interface_subinterface_ipv6_statistics_out_octets import InterfaceSubinterfaceIpv6StatisticsOutOctets
from ngsi_ld_models.models.interface_subinterface_ipv6_statistics_out_originated_octets import InterfaceSubinterfaceIpv6StatisticsOutOriginatedOctets
from ngsi_ld_models.models.interface_subinterface_ipv6_statistics_out_originated_packets import InterfaceSubinterfaceIpv6StatisticsOutOriginatedPackets
from ngsi_ld_models.models.interface_subinterface_ipv6_statistics_out_packets import InterfaceSubinterfaceIpv6StatisticsOutPackets
from ngsi_ld_models.models.is_part_of import IsPartOf
from typing import Optional, Set
from typing_extensions import Self

class InterfaceSubinterfaceIpv6Statistics(BaseModel):
    """
    Container for subinterface statistics, counting IPv4 packets or IPv6 packets or both dependending on the context  YANG module: srl_nokia-interfaces.yang 
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Entity id. ")
    type: StrictStr = Field(description="NGSI-LD Entity identifier. It has to be InterfaceSubinterfaceIpv6Statistics.")
    scope: Optional[EntityScope] = None
    location: Optional[GeoProperty] = None
    observation_space: Optional[GeoProperty] = Field(default=None, alias="observationSpace")
    operation_space: Optional[GeoProperty] = Field(default=None, alias="operationSpace")
    created_at: Optional[datetime] = Field(default=None, description="Is defined as the temporal Property at which the Entity, Property or Relationship was entered into an NGSI-LD system. ", alias="createdAt")
    modified_at: Optional[datetime] = Field(default=None, description="Is defined as the temporal Property at which the Entity, Property or Relationship was last modified in an NGSI-LD system, e.g. in order to correct a previously entered incorrect value. ", alias="modifiedAt")
    deleted_at: Optional[datetime] = Field(default=None, description="Is defined as the temporal Property at which the Entity, Property or Relationship was deleted from an NGSI-LD system.  Entity deletion timestamp. See clause 4.8 It is only used in notifications reporting deletions and in the Temporal Representation of Entities (clause 4.5.6), Properties (clause 4.5.7), Relationships (clause 4.5.8) and LanguageProperties (clause 5.2.32). ", alias="deletedAt")
    in_packets: Optional[InterfaceSubinterfaceIpv6StatisticsInPackets] = Field(default=None, alias="inPackets")
    in_octets: Optional[InterfaceSubinterfaceIpv6StatisticsInOctets] = Field(default=None, alias="inOctets")
    in_error_packets: Optional[InterfaceSubinterfaceIpv6StatisticsInErrorPackets] = Field(default=None, alias="inErrorPackets")
    in_discarded_packets: Optional[InterfaceSubinterfaceIpv6StatisticsInDiscardedPackets] = Field(default=None, alias="inDiscardedPackets")
    in_terminated_packets: Optional[InterfaceSubinterfaceIpv6StatisticsInTerminatedPackets] = Field(default=None, alias="inTerminatedPackets")
    in_terminated_octets: Optional[InterfaceSubinterfaceIpv6StatisticsInTerminatedOctets] = Field(default=None, alias="inTerminatedOctets")
    in_forwarded_packets: Optional[InterfaceSubinterfaceIpv6StatisticsInForwardedPackets] = Field(default=None, alias="inForwardedPackets")
    in_forwarded_octets: Optional[InterfaceSubinterfaceIpv6StatisticsInForwardedOctets] = Field(default=None, alias="inForwardedOctets")
    in_matched_ra_packets: Optional[InterfaceSubinterfaceIpv6StatisticsInMatchedRaPackets] = Field(default=None, alias="inMatchedRaPackets")
    out_forwarded_packets: Optional[InterfaceSubinterfaceIpv6StatisticsOutForwardedPackets] = Field(default=None, alias="outForwardedPackets")
    out_forwarded_octets: Optional[InterfaceSubinterfaceIpv6StatisticsOutForwardedOctets] = Field(default=None, alias="outForwardedOctets")
    out_originated_packets: Optional[InterfaceSubinterfaceIpv6StatisticsOutOriginatedPackets] = Field(default=None, alias="outOriginatedPackets")
    out_originated_octets: Optional[InterfaceSubinterfaceIpv6StatisticsOutOriginatedOctets] = Field(default=None, alias="outOriginatedOctets")
    out_error_packets: Optional[InterfaceSubinterfaceIpv6StatisticsOutErrorPackets] = Field(default=None, alias="outErrorPackets")
    out_discarded_packets: Optional[InterfaceSubinterfaceIpv6StatisticsOutDiscardedPackets] = Field(default=None, alias="outDiscardedPackets")
    out_packets: Optional[InterfaceSubinterfaceIpv6StatisticsOutPackets] = Field(default=None, alias="outPackets")
    out_octets: Optional[InterfaceSubinterfaceIpv6StatisticsOutOctets] = Field(default=None, alias="outOctets")
    last_clear: Optional[InterfaceSubinterfaceIpv6StatisticsLastClear] = Field(default=None, alias="lastClear")
    is_part_of: IsPartOf = Field(alias="isPartOf")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "type", "scope", "location", "observationSpace", "operationSpace", "createdAt", "modifiedAt", "deletedAt", "inPackets", "inOctets", "inErrorPackets", "inDiscardedPackets", "inTerminatedPackets", "inTerminatedOctets", "inForwardedPackets", "inForwardedOctets", "inMatchedRaPackets", "outForwardedPackets", "outForwardedOctets", "outOriginatedPackets", "outOriginatedOctets", "outErrorPackets", "outDiscardedPackets", "outPackets", "outOctets", "lastClear", "isPartOf"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('InterfaceSubinterfaceIpv6Statistics'):
            raise ValueError("must be one of enum values ('InterfaceSubinterfaceIpv6Statistics')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InterfaceSubinterfaceIpv6Statistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "modified_at",
            "deleted_at",
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of scope
        if self.scope:
            _dict['scope'] = self.scope.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of observation_space
        if self.observation_space:
            _dict['observationSpace'] = self.observation_space.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operation_space
        if self.operation_space:
            _dict['operationSpace'] = self.operation_space.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_packets
        if self.in_packets:
            _dict['inPackets'] = self.in_packets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_octets
        if self.in_octets:
            _dict['inOctets'] = self.in_octets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_error_packets
        if self.in_error_packets:
            _dict['inErrorPackets'] = self.in_error_packets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_discarded_packets
        if self.in_discarded_packets:
            _dict['inDiscardedPackets'] = self.in_discarded_packets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_terminated_packets
        if self.in_terminated_packets:
            _dict['inTerminatedPackets'] = self.in_terminated_packets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_terminated_octets
        if self.in_terminated_octets:
            _dict['inTerminatedOctets'] = self.in_terminated_octets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_forwarded_packets
        if self.in_forwarded_packets:
            _dict['inForwardedPackets'] = self.in_forwarded_packets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_forwarded_octets
        if self.in_forwarded_octets:
            _dict['inForwardedOctets'] = self.in_forwarded_octets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_matched_ra_packets
        if self.in_matched_ra_packets:
            _dict['inMatchedRaPackets'] = self.in_matched_ra_packets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out_forwarded_packets
        if self.out_forwarded_packets:
            _dict['outForwardedPackets'] = self.out_forwarded_packets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out_forwarded_octets
        if self.out_forwarded_octets:
            _dict['outForwardedOctets'] = self.out_forwarded_octets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out_originated_packets
        if self.out_originated_packets:
            _dict['outOriginatedPackets'] = self.out_originated_packets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out_originated_octets
        if self.out_originated_octets:
            _dict['outOriginatedOctets'] = self.out_originated_octets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out_error_packets
        if self.out_error_packets:
            _dict['outErrorPackets'] = self.out_error_packets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out_discarded_packets
        if self.out_discarded_packets:
            _dict['outDiscardedPackets'] = self.out_discarded_packets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out_packets
        if self.out_packets:
            _dict['outPackets'] = self.out_packets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out_octets
        if self.out_octets:
            _dict['outOctets'] = self.out_octets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_clear
        if self.last_clear:
            _dict['lastClear'] = self.last_clear.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_part_of
        if self.is_part_of:
            _dict['isPartOf'] = self.is_part_of.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InterfaceSubinterfaceIpv6Statistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type") if obj.get("type") is not None else 'InterfaceSubinterfaceIpv6Statistics',
            "scope": EntityScope.from_dict(obj["scope"]) if obj.get("scope") is not None else None,
            "location": GeoProperty.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "observationSpace": GeoProperty.from_dict(obj["observationSpace"]) if obj.get("observationSpace") is not None else None,
            "operationSpace": GeoProperty.from_dict(obj["operationSpace"]) if obj.get("operationSpace") is not None else None,
            "createdAt": obj.get("createdAt"),
            "modifiedAt": obj.get("modifiedAt"),
            "deletedAt": obj.get("deletedAt"),
            "inPackets": InterfaceSubinterfaceIpv6StatisticsInPackets.from_dict(obj["inPackets"]) if obj.get("inPackets") is not None else None,
            "inOctets": InterfaceSubinterfaceIpv6StatisticsInOctets.from_dict(obj["inOctets"]) if obj.get("inOctets") is not None else None,
            "inErrorPackets": InterfaceSubinterfaceIpv6StatisticsInErrorPackets.from_dict(obj["inErrorPackets"]) if obj.get("inErrorPackets") is not None else None,
            "inDiscardedPackets": InterfaceSubinterfaceIpv6StatisticsInDiscardedPackets.from_dict(obj["inDiscardedPackets"]) if obj.get("inDiscardedPackets") is not None else None,
            "inTerminatedPackets": InterfaceSubinterfaceIpv6StatisticsInTerminatedPackets.from_dict(obj["inTerminatedPackets"]) if obj.get("inTerminatedPackets") is not None else None,
            "inTerminatedOctets": InterfaceSubinterfaceIpv6StatisticsInTerminatedOctets.from_dict(obj["inTerminatedOctets"]) if obj.get("inTerminatedOctets") is not None else None,
            "inForwardedPackets": InterfaceSubinterfaceIpv6StatisticsInForwardedPackets.from_dict(obj["inForwardedPackets"]) if obj.get("inForwardedPackets") is not None else None,
            "inForwardedOctets": InterfaceSubinterfaceIpv6StatisticsInForwardedOctets.from_dict(obj["inForwardedOctets"]) if obj.get("inForwardedOctets") is not None else None,
            "inMatchedRaPackets": InterfaceSubinterfaceIpv6StatisticsInMatchedRaPackets.from_dict(obj["inMatchedRaPackets"]) if obj.get("inMatchedRaPackets") is not None else None,
            "outForwardedPackets": InterfaceSubinterfaceIpv6StatisticsOutForwardedPackets.from_dict(obj["outForwardedPackets"]) if obj.get("outForwardedPackets") is not None else None,
            "outForwardedOctets": InterfaceSubinterfaceIpv6StatisticsOutForwardedOctets.from_dict(obj["outForwardedOctets"]) if obj.get("outForwardedOctets") is not None else None,
            "outOriginatedPackets": InterfaceSubinterfaceIpv6StatisticsOutOriginatedPackets.from_dict(obj["outOriginatedPackets"]) if obj.get("outOriginatedPackets") is not None else None,
            "outOriginatedOctets": InterfaceSubinterfaceIpv6StatisticsOutOriginatedOctets.from_dict(obj["outOriginatedOctets"]) if obj.get("outOriginatedOctets") is not None else None,
            "outErrorPackets": InterfaceSubinterfaceIpv6StatisticsOutErrorPackets.from_dict(obj["outErrorPackets"]) if obj.get("outErrorPackets") is not None else None,
            "outDiscardedPackets": InterfaceSubinterfaceIpv6StatisticsOutDiscardedPackets.from_dict(obj["outDiscardedPackets"]) if obj.get("outDiscardedPackets") is not None else None,
            "outPackets": InterfaceSubinterfaceIpv6StatisticsOutPackets.from_dict(obj["outPackets"]) if obj.get("outPackets") is not None else None,
            "outOctets": InterfaceSubinterfaceIpv6StatisticsOutOctets.from_dict(obj["outOctets"]) if obj.get("outOctets") is not None else None,
            "lastClear": InterfaceSubinterfaceIpv6StatisticsLastClear.from_dict(obj["lastClear"]) if obj.get("lastClear") is not None else None,
            "isPartOf": IsPartOf.from_dict(obj["isPartOf"]) if obj.get("isPartOf") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


