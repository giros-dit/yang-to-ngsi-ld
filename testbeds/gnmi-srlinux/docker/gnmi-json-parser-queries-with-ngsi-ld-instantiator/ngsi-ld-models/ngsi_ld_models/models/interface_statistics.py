# coding: utf-8

"""
    OpenAPI schemas for YANG data models srl_nokia-interfaces.yang, srl_nokia-common.yang, srl_nokia-features.yang, srl_nokia-if-ip.yang, srl_nokia-extensions.yang, srl_nokia-interfaces-bridge-table.yang, srl_nokia-interfaces-bridge-table-statistics.yang, srl_nokia-platform.yang, srl_nokia-platform-lc.yang, srl_nokia-platform-pipeline-counters.yang.

    OpenAPI schemas for YANG data models compliant with the NGSI-LD OAS V1.6.1 metamodel according to ETSI GS CIM 009 V1.6.1.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from ngsi_ld_models.models.carrier_transitions import CarrierTransitions
from ngsi_ld_models.models.entity_scope import EntityScope
from ngsi_ld_models.models.geo_property import GeoProperty
from ngsi_ld_models.models.in_broadcast_packets import InBroadcastPackets
from ngsi_ld_models.models.in_fcs_error_packets import InFcsErrorPackets
from ngsi_ld_models.models.in_multicast_packets import InMulticastPackets
from ngsi_ld_models.models.in_unicast_packets import InUnicastPackets
from ngsi_ld_models.models.interface_statistics_in_discarded_packets import InterfaceStatisticsInDiscardedPackets
from ngsi_ld_models.models.interface_statistics_in_error_packets import InterfaceStatisticsInErrorPackets
from ngsi_ld_models.models.interface_statistics_in_octets import InterfaceStatisticsInOctets
from ngsi_ld_models.models.interface_statistics_in_packets import InterfaceStatisticsInPackets
from ngsi_ld_models.models.interface_statistics_last_clear import InterfaceStatisticsLastClear
from ngsi_ld_models.models.interface_statistics_out_discarded_packets import InterfaceStatisticsOutDiscardedPackets
from ngsi_ld_models.models.interface_statistics_out_error_packets import InterfaceStatisticsOutErrorPackets
from ngsi_ld_models.models.interface_statistics_out_octets import InterfaceStatisticsOutOctets
from ngsi_ld_models.models.interface_statistics_out_packets import InterfaceStatisticsOutPackets
from ngsi_ld_models.models.is_part_of import IsPartOf
from ngsi_ld_models.models.out_broadcast_packets import OutBroadcastPackets
from ngsi_ld_models.models.out_mirror_octets import OutMirrorOctets
from ngsi_ld_models.models.out_mirror_packets import OutMirrorPackets
from ngsi_ld_models.models.out_multicast_packets import OutMulticastPackets
from ngsi_ld_models.models.out_unicast_packets import OutUnicastPackets
from typing import Optional, Set
from typing_extensions import Self

class InterfaceStatistics(BaseModel):
    """
     YANG module: srl_nokia-interfaces.yang 
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Entity id. ")
    type: StrictStr = Field(description="NGSI-LD Entity identifier. It has to be InterfaceStatistics.")
    scope: Optional[EntityScope] = None
    location: Optional[GeoProperty] = None
    observation_space: Optional[GeoProperty] = Field(default=None, alias="observationSpace")
    operation_space: Optional[GeoProperty] = Field(default=None, alias="operationSpace")
    created_at: Optional[datetime] = Field(default=None, description="Is defined as the temporal Property at which the Entity, Property or Relationship was entered into an NGSI-LD system. ", alias="createdAt")
    modified_at: Optional[datetime] = Field(default=None, description="Is defined as the temporal Property at which the Entity, Property or Relationship was last modified in an NGSI-LD system, e.g. in order to correct a previously entered incorrect value. ", alias="modifiedAt")
    deleted_at: Optional[datetime] = Field(default=None, description="Is defined as the temporal Property at which the Entity, Property or Relationship was deleted from an NGSI-LD system.  Entity deletion timestamp. See clause 4.8 It is only used in notifications reporting deletions and in the Temporal Representation of Entities (clause 4.5.6), Properties (clause 4.5.7), Relationships (clause 4.5.8) and LanguageProperties (clause 5.2.32). ", alias="deletedAt")
    in_packets: Optional[InterfaceStatisticsInPackets] = Field(default=None, alias="inPackets")
    in_octets: Optional[InterfaceStatisticsInOctets] = Field(default=None, alias="inOctets")
    in_unicast_packets: Optional[InUnicastPackets] = Field(default=None, alias="inUnicastPackets")
    in_broadcast_packets: Optional[InBroadcastPackets] = Field(default=None, alias="inBroadcastPackets")
    in_multicast_packets: Optional[InMulticastPackets] = Field(default=None, alias="inMulticastPackets")
    in_discarded_packets: Optional[InterfaceStatisticsInDiscardedPackets] = Field(default=None, alias="inDiscardedPackets")
    in_error_packets: Optional[InterfaceStatisticsInErrorPackets] = Field(default=None, alias="inErrorPackets")
    in_fcs_error_packets: Optional[InFcsErrorPackets] = Field(default=None, alias="inFcsErrorPackets")
    out_packets: Optional[InterfaceStatisticsOutPackets] = Field(default=None, alias="outPackets")
    out_octets: Optional[InterfaceStatisticsOutOctets] = Field(default=None, alias="outOctets")
    out_mirror_octets: Optional[OutMirrorOctets] = Field(default=None, alias="outMirrorOctets")
    out_unicast_packets: Optional[OutUnicastPackets] = Field(default=None, alias="outUnicastPackets")
    out_broadcast_packets: Optional[OutBroadcastPackets] = Field(default=None, alias="outBroadcastPackets")
    out_multicast_packets: Optional[OutMulticastPackets] = Field(default=None, alias="outMulticastPackets")
    out_discarded_packets: Optional[InterfaceStatisticsOutDiscardedPackets] = Field(default=None, alias="outDiscardedPackets")
    out_error_packets: Optional[InterfaceStatisticsOutErrorPackets] = Field(default=None, alias="outErrorPackets")
    out_mirror_packets: Optional[OutMirrorPackets] = Field(default=None, alias="outMirrorPackets")
    carrier_transitions: Optional[CarrierTransitions] = Field(default=None, alias="carrierTransitions")
    last_clear: Optional[InterfaceStatisticsLastClear] = Field(default=None, alias="lastClear")
    is_part_of: IsPartOf = Field(alias="isPartOf")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "type", "scope", "location", "observationSpace", "operationSpace", "createdAt", "modifiedAt", "deletedAt", "inPackets", "inOctets", "inUnicastPackets", "inBroadcastPackets", "inMulticastPackets", "inDiscardedPackets", "inErrorPackets", "inFcsErrorPackets", "outPackets", "outOctets", "outMirrorOctets", "outUnicastPackets", "outBroadcastPackets", "outMulticastPackets", "outDiscardedPackets", "outErrorPackets", "outMirrorPackets", "carrierTransitions", "lastClear", "isPartOf"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('InterfaceStatistics'):
            raise ValueError("must be one of enum values ('InterfaceStatistics')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InterfaceStatistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "modified_at",
            "deleted_at",
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of scope
        if self.scope:
            _dict['scope'] = self.scope.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of observation_space
        if self.observation_space:
            _dict['observationSpace'] = self.observation_space.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operation_space
        if self.operation_space:
            _dict['operationSpace'] = self.operation_space.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_packets
        if self.in_packets:
            _dict['inPackets'] = self.in_packets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_octets
        if self.in_octets:
            _dict['inOctets'] = self.in_octets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_unicast_packets
        if self.in_unicast_packets:
            _dict['inUnicastPackets'] = self.in_unicast_packets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_broadcast_packets
        if self.in_broadcast_packets:
            _dict['inBroadcastPackets'] = self.in_broadcast_packets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_multicast_packets
        if self.in_multicast_packets:
            _dict['inMulticastPackets'] = self.in_multicast_packets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_discarded_packets
        if self.in_discarded_packets:
            _dict['inDiscardedPackets'] = self.in_discarded_packets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_error_packets
        if self.in_error_packets:
            _dict['inErrorPackets'] = self.in_error_packets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_fcs_error_packets
        if self.in_fcs_error_packets:
            _dict['inFcsErrorPackets'] = self.in_fcs_error_packets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out_packets
        if self.out_packets:
            _dict['outPackets'] = self.out_packets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out_octets
        if self.out_octets:
            _dict['outOctets'] = self.out_octets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out_mirror_octets
        if self.out_mirror_octets:
            _dict['outMirrorOctets'] = self.out_mirror_octets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out_unicast_packets
        if self.out_unicast_packets:
            _dict['outUnicastPackets'] = self.out_unicast_packets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out_broadcast_packets
        if self.out_broadcast_packets:
            _dict['outBroadcastPackets'] = self.out_broadcast_packets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out_multicast_packets
        if self.out_multicast_packets:
            _dict['outMulticastPackets'] = self.out_multicast_packets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out_discarded_packets
        if self.out_discarded_packets:
            _dict['outDiscardedPackets'] = self.out_discarded_packets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out_error_packets
        if self.out_error_packets:
            _dict['outErrorPackets'] = self.out_error_packets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of out_mirror_packets
        if self.out_mirror_packets:
            _dict['outMirrorPackets'] = self.out_mirror_packets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of carrier_transitions
        if self.carrier_transitions:
            _dict['carrierTransitions'] = self.carrier_transitions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_clear
        if self.last_clear:
            _dict['lastClear'] = self.last_clear.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_part_of
        if self.is_part_of:
            _dict['isPartOf'] = self.is_part_of.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InterfaceStatistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type") if obj.get("type") is not None else 'InterfaceStatistics',
            "scope": EntityScope.from_dict(obj["scope"]) if obj.get("scope") is not None else None,
            "location": GeoProperty.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "observationSpace": GeoProperty.from_dict(obj["observationSpace"]) if obj.get("observationSpace") is not None else None,
            "operationSpace": GeoProperty.from_dict(obj["operationSpace"]) if obj.get("operationSpace") is not None else None,
            "createdAt": obj.get("createdAt"),
            "modifiedAt": obj.get("modifiedAt"),
            "deletedAt": obj.get("deletedAt"),
            "inPackets": InterfaceStatisticsInPackets.from_dict(obj["inPackets"]) if obj.get("inPackets") is not None else None,
            "inOctets": InterfaceStatisticsInOctets.from_dict(obj["inOctets"]) if obj.get("inOctets") is not None else None,
            "inUnicastPackets": InUnicastPackets.from_dict(obj["inUnicastPackets"]) if obj.get("inUnicastPackets") is not None else None,
            "inBroadcastPackets": InBroadcastPackets.from_dict(obj["inBroadcastPackets"]) if obj.get("inBroadcastPackets") is not None else None,
            "inMulticastPackets": InMulticastPackets.from_dict(obj["inMulticastPackets"]) if obj.get("inMulticastPackets") is not None else None,
            "inDiscardedPackets": InterfaceStatisticsInDiscardedPackets.from_dict(obj["inDiscardedPackets"]) if obj.get("inDiscardedPackets") is not None else None,
            "inErrorPackets": InterfaceStatisticsInErrorPackets.from_dict(obj["inErrorPackets"]) if obj.get("inErrorPackets") is not None else None,
            "inFcsErrorPackets": InFcsErrorPackets.from_dict(obj["inFcsErrorPackets"]) if obj.get("inFcsErrorPackets") is not None else None,
            "outPackets": InterfaceStatisticsOutPackets.from_dict(obj["outPackets"]) if obj.get("outPackets") is not None else None,
            "outOctets": InterfaceStatisticsOutOctets.from_dict(obj["outOctets"]) if obj.get("outOctets") is not None else None,
            "outMirrorOctets": OutMirrorOctets.from_dict(obj["outMirrorOctets"]) if obj.get("outMirrorOctets") is not None else None,
            "outUnicastPackets": OutUnicastPackets.from_dict(obj["outUnicastPackets"]) if obj.get("outUnicastPackets") is not None else None,
            "outBroadcastPackets": OutBroadcastPackets.from_dict(obj["outBroadcastPackets"]) if obj.get("outBroadcastPackets") is not None else None,
            "outMulticastPackets": OutMulticastPackets.from_dict(obj["outMulticastPackets"]) if obj.get("outMulticastPackets") is not None else None,
            "outDiscardedPackets": InterfaceStatisticsOutDiscardedPackets.from_dict(obj["outDiscardedPackets"]) if obj.get("outDiscardedPackets") is not None else None,
            "outErrorPackets": InterfaceStatisticsOutErrorPackets.from_dict(obj["outErrorPackets"]) if obj.get("outErrorPackets") is not None else None,
            "outMirrorPackets": OutMirrorPackets.from_dict(obj["outMirrorPackets"]) if obj.get("outMirrorPackets") is not None else None,
            "carrierTransitions": CarrierTransitions.from_dict(obj["carrierTransitions"]) if obj.get("carrierTransitions") is not None else None,
            "lastClear": InterfaceStatisticsLastClear.from_dict(obj["lastClear"]) if obj.get("lastClear") is not None else None,
            "isPartOf": IsPartOf.from_dict(obj["isPartOf"]) if obj.get("isPartOf") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


