# coding: utf-8

"""
    OpenAPI schemas for YANG data models openconfig-interfaces.yang, openconfig-yang-types@2018-11-21.yang, openconfig-types@2019-04-16.yang, openconfig-extensions@2018-10-17.yang, openconfig-if-ethernet@2018-01-05.yang, iana-if-type@2014-05-08.yang, openconfig-if-ip@2018-01-05.yang, openconfig-inet-types@2017-08-24.yang, openconfig-if-aggregate@2018-01-05.yang, openconfig-vlan@2016-05-26.yang, openconfig-vlan-types@2016-05-26.yang.

    OpenAPI schemas for YANG data models compliant with the NGSI-LD OAS V1.6.1 metamodel according to ETSI GS CIM 009 V1.6.1.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from ngsi_ld_models.models.entity_scope import EntityScope
from ngsi_ld_models.models.geo_property import GeoProperty
from ngsi_ld_models.models.interface_subinterfaces_subinterface_ipv4_addresses_address_vrrp_vrrp_group_config_accept_mode import InterfaceSubinterfacesSubinterfaceIpv4AddressesAddressVrrpVrrpGroupConfigAcceptMode
from ngsi_ld_models.models.interface_subinterfaces_subinterface_ipv4_addresses_address_vrrp_vrrp_group_config_advertisement_interval import InterfaceSubinterfacesSubinterfaceIpv4AddressesAddressVrrpVrrpGroupConfigAdvertisementInterval
from ngsi_ld_models.models.interface_subinterfaces_subinterface_ipv4_addresses_address_vrrp_vrrp_group_config_preempt import InterfaceSubinterfacesSubinterfaceIpv4AddressesAddressVrrpVrrpGroupConfigPreempt
from ngsi_ld_models.models.interface_subinterfaces_subinterface_ipv4_addresses_address_vrrp_vrrp_group_config_preempt_delay import InterfaceSubinterfacesSubinterfaceIpv4AddressesAddressVrrpVrrpGroupConfigPreemptDelay
from ngsi_ld_models.models.interface_subinterfaces_subinterface_ipv4_addresses_address_vrrp_vrrp_group_config_priority import InterfaceSubinterfacesSubinterfaceIpv4AddressesAddressVrrpVrrpGroupConfigPriority
from ngsi_ld_models.models.interface_subinterfaces_subinterface_ipv4_addresses_address_vrrp_vrrp_group_config_virtual_address import InterfaceSubinterfacesSubinterfaceIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress
from ngsi_ld_models.models.interface_subinterfaces_subinterface_ipv4_addresses_address_vrrp_vrrp_group_config_virtual_router_id import InterfaceSubinterfacesSubinterfaceIpv4AddressesAddressVrrpVrrpGroupConfigVirtualRouterId
from ngsi_ld_models.models.is_part_of import IsPartOf
from typing import Optional, Set
from typing_extensions import Self

class InterfaceSubinterfacesSubinterfaceIpv4AddressesAddressVrrpVrrpGroupConfig(BaseModel):
    """
    Configuration data for the VRRP group  YANG module: openconfig-if-ip.yang 
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Entity id. ")
    type: StrictStr = Field(description="NGSI-LD Entity identifier. It has to be InterfaceSubinterfacesSubinterfaceIpv4AddressesAddressVrrpVrrpGroupConfig.")
    scope: Optional[EntityScope] = None
    location: Optional[GeoProperty] = None
    observation_space: Optional[GeoProperty] = Field(default=None, alias="observationSpace")
    operation_space: Optional[GeoProperty] = Field(default=None, alias="operationSpace")
    created_at: Optional[datetime] = Field(default=None, description="Is defined as the temporal Property at which the Entity, Property or Relationship was entered into an NGSI-LD system. ", alias="createdAt")
    modified_at: Optional[datetime] = Field(default=None, description="Is defined as the temporal Property at which the Entity, Property or Relationship was last modified in an NGSI-LD system, e.g. in order to correct a previously entered incorrect value. ", alias="modifiedAt")
    deleted_at: Optional[datetime] = Field(default=None, description="Is defined as the temporal Property at which the Entity, Property or Relationship was deleted from an NGSI-LD system.  Entity deletion timestamp. See clause 4.8 It is only used in notifications reporting deletions and in the Temporal Representation of Entities (clause 4.5.6), Properties (clause 4.5.7), Relationships (clause 4.5.8) and LanguageProperties (clause 5.2.32). ", alias="deletedAt")
    virtual_router_id: Optional[InterfaceSubinterfacesSubinterfaceIpv4AddressesAddressVrrpVrrpGroupConfigVirtualRouterId] = Field(default=None, alias="virtualRouterId")
    virtual_address: Optional[InterfaceSubinterfacesSubinterfaceIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress] = Field(default=None, alias="virtualAddress")
    priority: Optional[InterfaceSubinterfacesSubinterfaceIpv4AddressesAddressVrrpVrrpGroupConfigPriority] = None
    preempt: Optional[InterfaceSubinterfacesSubinterfaceIpv4AddressesAddressVrrpVrrpGroupConfigPreempt] = None
    preempt_delay: Optional[InterfaceSubinterfacesSubinterfaceIpv4AddressesAddressVrrpVrrpGroupConfigPreemptDelay] = Field(default=None, alias="preemptDelay")
    accept_mode: Optional[InterfaceSubinterfacesSubinterfaceIpv4AddressesAddressVrrpVrrpGroupConfigAcceptMode] = Field(default=None, alias="acceptMode")
    advertisement_interval: Optional[InterfaceSubinterfacesSubinterfaceIpv4AddressesAddressVrrpVrrpGroupConfigAdvertisementInterval] = Field(default=None, alias="advertisementInterval")
    is_part_of: IsPartOf = Field(alias="isPartOf")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "type", "scope", "location", "observationSpace", "operationSpace", "createdAt", "modifiedAt", "deletedAt", "virtualRouterId", "virtualAddress", "priority", "preempt", "preemptDelay", "acceptMode", "advertisementInterval", "isPartOf"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('InterfaceSubinterfacesSubinterfaceIpv4AddressesAddressVrrpVrrpGroupConfig'):
            raise ValueError("must be one of enum values ('InterfaceSubinterfacesSubinterfaceIpv4AddressesAddressVrrpVrrpGroupConfig')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InterfaceSubinterfacesSubinterfaceIpv4AddressesAddressVrrpVrrpGroupConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "modified_at",
            "deleted_at",
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of scope
        if self.scope:
            _dict['scope'] = self.scope.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of observation_space
        if self.observation_space:
            _dict['observationSpace'] = self.observation_space.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operation_space
        if self.operation_space:
            _dict['operationSpace'] = self.operation_space.to_dict()
        # override the default output from pydantic by calling `to_dict()` of virtual_router_id
        if self.virtual_router_id:
            _dict['virtualRouterId'] = self.virtual_router_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of virtual_address
        if self.virtual_address:
            _dict['virtualAddress'] = self.virtual_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of priority
        if self.priority:
            _dict['priority'] = self.priority.to_dict()
        # override the default output from pydantic by calling `to_dict()` of preempt
        if self.preempt:
            _dict['preempt'] = self.preempt.to_dict()
        # override the default output from pydantic by calling `to_dict()` of preempt_delay
        if self.preempt_delay:
            _dict['preemptDelay'] = self.preempt_delay.to_dict()
        # override the default output from pydantic by calling `to_dict()` of accept_mode
        if self.accept_mode:
            _dict['acceptMode'] = self.accept_mode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of advertisement_interval
        if self.advertisement_interval:
            _dict['advertisementInterval'] = self.advertisement_interval.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_part_of
        if self.is_part_of:
            _dict['isPartOf'] = self.is_part_of.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InterfaceSubinterfacesSubinterfaceIpv4AddressesAddressVrrpVrrpGroupConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type") if obj.get("type") is not None else 'InterfaceSubinterfacesSubinterfaceIpv4AddressesAddressVrrpVrrpGroupConfig',
            "scope": EntityScope.from_dict(obj["scope"]) if obj.get("scope") is not None else None,
            "location": GeoProperty.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "observationSpace": GeoProperty.from_dict(obj["observationSpace"]) if obj.get("observationSpace") is not None else None,
            "operationSpace": GeoProperty.from_dict(obj["operationSpace"]) if obj.get("operationSpace") is not None else None,
            "createdAt": obj.get("createdAt"),
            "modifiedAt": obj.get("modifiedAt"),
            "deletedAt": obj.get("deletedAt"),
            "virtualRouterId": InterfaceSubinterfacesSubinterfaceIpv4AddressesAddressVrrpVrrpGroupConfigVirtualRouterId.from_dict(obj["virtualRouterId"]) if obj.get("virtualRouterId") is not None else None,
            "virtualAddress": InterfaceSubinterfacesSubinterfaceIpv4AddressesAddressVrrpVrrpGroupConfigVirtualAddress.from_dict(obj["virtualAddress"]) if obj.get("virtualAddress") is not None else None,
            "priority": InterfaceSubinterfacesSubinterfaceIpv4AddressesAddressVrrpVrrpGroupConfigPriority.from_dict(obj["priority"]) if obj.get("priority") is not None else None,
            "preempt": InterfaceSubinterfacesSubinterfaceIpv4AddressesAddressVrrpVrrpGroupConfigPreempt.from_dict(obj["preempt"]) if obj.get("preempt") is not None else None,
            "preemptDelay": InterfaceSubinterfacesSubinterfaceIpv4AddressesAddressVrrpVrrpGroupConfigPreemptDelay.from_dict(obj["preemptDelay"]) if obj.get("preemptDelay") is not None else None,
            "acceptMode": InterfaceSubinterfacesSubinterfaceIpv4AddressesAddressVrrpVrrpGroupConfigAcceptMode.from_dict(obj["acceptMode"]) if obj.get("acceptMode") is not None else None,
            "advertisementInterval": InterfaceSubinterfacesSubinterfaceIpv4AddressesAddressVrrpVrrpGroupConfigAdvertisementInterval.from_dict(obj["advertisementInterval"]) if obj.get("advertisementInterval") is not None else None,
            "isPartOf": IsPartOf.from_dict(obj["isPartOf"]) if obj.get("isPartOf") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


