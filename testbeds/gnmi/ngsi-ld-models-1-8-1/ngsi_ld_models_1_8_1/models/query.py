# coding: utf-8

"""
    NGSI-LD OAS

    OpenAPI Specification for NGSI-LD API.

    The version of the OpenAPI document: 1.8.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from ngsi_ld_models_1_8_1.models.entity_selector import EntitySelector
from ngsi_ld_models_1_8_1.models.geo_query import GeoQuery
from typing import Optional, Set
from typing_extensions import Self

class Query(BaseModel):
    """
    5.2.23 This datatype represents the information that is required in order to convey a query when a \"Query Entities\" operation is to be performed (as per clause 5.7.2). 
    """ # noqa: E501
    type: StrictStr = Field(description="JSON-LD @type. ")
    entities: Optional[Annotated[List[EntitySelector], Field(min_length=1)]] = Field(default=None, description="Entity ids, id pattern and Entity types that shall be matched by Entities in order to be retrieved. ")
    attrs: Optional[Annotated[List[StrictStr], Field(min_length=1)]] = Field(default=None, description="List of Attributes that shall be matched by Entities in order to be retrieved. If not present all Attributes will be retrieved. A synonym for a combination of the pick and q parameter. DEPRECATED. ")
    pick: Optional[Annotated[List[StrictStr], Field(min_length=1)]] = Field(default=None, description="When defined, every Entity within payload body is reduced down to only contain  the specified Entity members. Entity member (\"id\", \"type\", \"scope\" or a projected Attribute name) as a valid  attribute projection language string as per clause 4.21). ")
    omit: Optional[Annotated[List[StrictStr], Field(min_length=1)]] = Field(default=None, description="When defined, the specified Entity members are removed from each Entity within  the payload. Entity member (\"id\", \"type\", \"scope\" or a projected Attribute name)  as a valid attribute projection language string as per clause 4.21). ")
    q: Optional[StrictStr] = Field(default=None, description="Query that shall be matched by Entities in order to be retrieved. ")
    geo_q: Optional[GeoQuery] = Field(default=None, alias="geoQ")
    csf: Optional[StrictStr] = Field(default=None, description="Context source filter that shall be matched by Context Source Registrations describing Context Sources to be used for retrieving Entities. ")
    scope_q: Optional[StrictStr] = Field(default=None, description="Scope query.", alias="scopeQ")
    lang: Optional[StrictStr] = Field(default=None, description="Language filter to be applied to the query (clause 4.15).")
    contained_by: Optional[Annotated[List[StrictStr], Field(min_length=1)]] = Field(default=None, description="List of entity ids which have previously been encountered whilst retrieving the Entity Graph.  Only applicable if joinLevel is present.  Only applicable for the \"Query Entities\" operation (clause 5.7.2). ", alias="containedBy")
    dataset_id: Optional[List[StrictStr]] = Field(default=None, description="Specifies the datasetIds of the Attribute instances to be selected for each  matched Attribute as per clause 4.5.5. Valid URIs, \"@none\" for including the  default Attribute instances. ", alias="datasetId")
    entity_map: Optional[StrictBool] = Field(default=None, description="If true, the location of the EntityMap used in the operation is returned in the response.  Only applicable for the \"Query Entities\" operation (clause 5.7.2). ", alias="entityMap")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["type", "entities", "attrs", "pick", "omit", "q", "geoQ", "csf", "scopeQ", "lang", "containedBy", "datasetId", "entityMap"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Query']):
            raise ValueError("must be one of enum values ('Query')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Query from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in entities (list)
        _items = []
        if self.entities:
            for _item_entities in self.entities:
                if _item_entities:
                    _items.append(_item_entities.to_dict())
            _dict['entities'] = _items
        # override the default output from pydantic by calling `to_dict()` of geo_q
        if self.geo_q:
            _dict['geoQ'] = self.geo_q.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Query from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "entities": [EntitySelector.from_dict(_item) for _item in obj["entities"]] if obj.get("entities") is not None else None,
            "attrs": obj.get("attrs"),
            "pick": obj.get("pick"),
            "omit": obj.get("omit"),
            "q": obj.get("q"),
            "geoQ": GeoQuery.from_dict(obj["geoQ"]) if obj.get("geoQ") is not None else None,
            "csf": obj.get("csf"),
            "scopeQ": obj.get("scopeQ"),
            "lang": obj.get("lang"),
            "containedBy": obj.get("containedBy"),
            "datasetId": obj.get("datasetId"),
            "entityMap": obj.get("entityMap")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


