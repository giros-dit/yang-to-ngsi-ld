# coding: utf-8

"""
    NGSI-LD OAS

    OpenAPI Specification for NGSI-LD API.

    The version of the OpenAPI document: 1.8.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from ngsi_ld_models_1_8_1.models.ld_context import LdContext
from typing import Optional, Set
from typing_extensions import Self

class RetrieveCSIdentityInfo200Response(BaseModel):
    """
    RetrieveCSIdentityInfo200Response
    """ # noqa: E501
    id: StrictStr = Field(description="Context Source ID. ")
    type: StrictStr = Field(description="Node type. ")
    context_source_extras: Optional[Dict[str, Any]] = Field(default=None, description="Instance specific information relevant to the configuration  of the Context Source itself in raw unexpandable JSON which  shall not be interpreted as JSON-LD using the supplied @context. ", alias="contextSourceExtras")
    context_source_up_time: StrictStr = Field(description="Total Duration that the Context Source has been available. ", alias="contextSourceUpTime")
    context_source_time_at: datetime = Field(description="Current time observed at the Context Source. Timestamp. See clause 4.8. ", alias="contextSourceTimeAt")
    context_source_alias: Annotated[str, Field(min_length=1, strict=True)] = Field(description="A unique id for a Context Source which can be used to identify loops.  In the multi-tenancy use case (see clause 4.14), this id shall be  used to identify a specific Tenant within a registered Context Source. ", alias="contextSourceAlias")
    context: LdContext = Field(alias="@context")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "type", "contextSourceExtras", "contextSourceUpTime", "contextSourceTimeAt", "contextSourceAlias", "@context"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ContextSourceIdentity']):
            raise ValueError("must be one of enum values ('ContextSourceIdentity')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RetrieveCSIdentityInfo200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['@context'] = self.context.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RetrieveCSIdentityInfo200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type") if obj.get("type") is not None else 'ContextSourceIdentity',
            "contextSourceExtras": obj.get("contextSourceExtras"),
            "contextSourceUpTime": obj.get("contextSourceUpTime"),
            "contextSourceTimeAt": obj.get("contextSourceTimeAt"),
            "contextSourceAlias": obj.get("contextSourceAlias"),
            "@context": LdContext.from_dict(obj["@context"]) if obj.get("@context") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


