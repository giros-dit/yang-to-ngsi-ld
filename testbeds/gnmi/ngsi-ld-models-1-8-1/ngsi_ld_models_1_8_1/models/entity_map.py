# coding: utf-8

"""
    NGSI-LD OAS

    OpenAPI Specification for NGSI-LD API.

    The version of the OpenAPI document: 1.8.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EntityMap(BaseModel):
    """
    5.2.39 EntityMap. 
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="EntityMap id. ")
    type: StrictStr = Field(description="Node type. ")
    expires_at: datetime = Field(description="Expiration date for the EntityMap. ", alias="expiresAt")
    entity_map: Optional[Dict[str, Any]] = Field(default=None, description="System generated mapping of Entities to CSourceRegistrations.  A set of key-value pairs whose keys shall be strings representing  Entity ids and whose values shall be an array holding every  CSourceRegistration id which is relevant to the ongoing Context  Information Consumption request (see clause 4.21).   The key \"@none\" shall be used to refer to an Entity that is held locally. ", alias="entityMap")
    linked_maps: Optional[Dict[str, Any]] = Field(default=None, description="System generated mapping of Context CSourceRegistrations to a URI  indicating which EntityMaps was used by the Context Source.  A set of key-value pairs whose keys shall be strings representing  CSourceRegistration ids which are relevant to the ongoing Context  Information request and whose values shall represent the associated  EntityMap id used by the ContextSource. ", alias="linkedMaps")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "type", "expiresAt", "entityMap", "linkedMaps"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['EntityMap']):
            raise ValueError("must be one of enum values ('EntityMap')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EntityMap from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "entity_map",
            "linked_maps",
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EntityMap from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type") if obj.get("type") is not None else 'EntityMap',
            "expiresAt": obj.get("expiresAt"),
            "entityMap": obj.get("entityMap"),
            "linkedMaps": obj.get("linkedMaps")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


