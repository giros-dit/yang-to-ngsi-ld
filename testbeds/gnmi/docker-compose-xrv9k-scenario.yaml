version: '3.8'
services:
  zookeeper:
    image: zookeeper
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181"
    logging:
      driver: none

  kafka:
    image: wurstmeister/kafka:latest
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_LOG_DIRS: "/tmp/kafka-logs"
      KAFKA_CREATE_TOPICS: "interfaces-state-queries:1:1,interfaces-state-notifications:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    logging:
      driver: none
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--zookeeper", "zookeeper:2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  context-catalog:
    image: halverneus/static-file-server
    hostname: context-catalog
    container_name: context-catalog
    expose:
      - "8080"
    ports:
      - "8080:8080"
    volumes:
      - ./docker/context-catalog:/web 

  postgres:
    image: postgis/postgis
    hostname: postgres
    container_name: postgres
    ports:
      - "5432"
    environment:
      POSTGRES_USER: ngb
      POSTGRES_PASSWORD: ngb
      POSTGRES_DB: ngb
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "ngb", "-U", "ngb"]
      interval: 10s
      timeout: 5s
      retries: 5

  scorpio:
    image: scorpiobroker/all-in-one-runner:java-latest
    hostname: scorpio
    container_name: scorpio
    expose:
      - "9090"
    ports:
      - "9090:9090"
    depends_on:
      postgres:
        condition: service_healthy
      context-catalog:
        condition: service_started

  gnmic-collector-queries:
    build: 
      context: ./docker/gnmic-collector-queries/
      dockerfile: Dockerfile
    hostname: gnmic-collector-queries
    container_name: gnmic-collector-queries
    command: ["python3", "-u", "/opt/gnmic-collector-queries/gnmic-collector-queries-kafka-xrv9k-scenario.py", "1800"]
    volumes:
      - ./docker/gnmic-collector-queries:/opt/gnmic-collector-queries
    depends_on:
      kafka:
        condition: service_healthy
      gnmi-json-parser-queries-with-ngsi-ld-instantiator:
        condition: service_healthy
        
  gnmic-collector-subscriptions:
    image: ghcr.io/openconfig/gnmic:latest
    hostname: gnmic-collector-subscriptions
    container_name: gnmic-collector-subscriptions
    volumes:
      - ./docker/gnmic-collector-subscriptions/gnmic-subs-xrv9k.yaml:/app/gnmic-subs-xrv9k.yaml
    command: "subscribe --config /app/gnmic-subs-xrv9k.yaml --format event"
    depends_on:
      kafka:
        condition: service_healthy
      gnmi-json-parser-notifications-with-ngsi-ld-instantiator:
        condition: service_healthy

  gnmi-json-parser-queries-with-ngsi-ld-instantiator:
    build:
      context: .
      dockerfile: ./docker/gnmi-json-parser-queries-with-ngsi-ld-instantiator/Dockerfile
    hostname: gnmi-json-parser-queries-with-ngsi-ld-instantiator
    container_name: gnmi-json-parser-queries-with-ngsi-ld-instantiator
    volumes:
      - ./docker/gnmi-json-parser-queries-with-ngsi-ld-instantiator:/opt/gnmi-json-parser-queries-with-ngsi-ld-instantiator
    healthcheck:
      test: ["CMD", "python3", "--version"]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      scorpio:
        condition: service_started
      context-catalog:
        condition: service_started
      kafka:
        condition: service_healthy
    restart: always
    
  gnmi-json-parser-notifications-with-ngsi-ld-instantiator:
    build:
      context: .
      dockerfile: ./docker/gnmi-json-parser-notifications-with-ngsi-ld-instantiator/Dockerfile
    hostname: gnmi-json-parser-notifications-with-ngsi-ld-instantiator
    container_name: gnmi-json-parser-notifications-with-ngsi-ld-instantiator
    volumes:
      - ./docker/gnmi-json-parser-notifications-with-ngsi-ld-instantiator:/opt/gnmi-json-parser-notifications-with-ngsi-ld-instantiator
    healthcheck:
      test: ["CMD", "python3", "--version"]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      scorpio:
        condition: service_started
      context-catalog:
        condition: service_started
      kafka:
        condition: service_healthy
      gnmi-json-parser-queries-with-ngsi-ld-instantiator:
        condition: service_healthy
    restart: always

  notifier-tester:
    build:
      context: .
      dockerfile: ./docker/notifier-tester/Dockerfile
    hostname: notifier-tester
    container_name: notifier-tester
    expose:
      - "8082"
    ports:
      - "8082:8082"
    volumes:
      - ./docker/notifier-tester/notifier_tester:/opt/notifier-tester/notifier_tester
    depends_on:
      scorpio:
        condition: service_started
      context-catalog:
        condition: service_started
      kafka:
        condition: service_healthy
      gnmi-json-parser-notifications-with-ngsi-ld-instantiator:
        condition: service_healthy
    restart: always

  topology-discoverer:
    build:
      context: .
      dockerfile: ./docker/topology-discoverer/Dockerfile
    hostname: topology-discoverer
    container_name: topology-discoverer
    command: ["/opt/topology-discoverer/discover-topology.sh", "xrv9k-scenario", "3600"]
    volumes:
      - ./containerlab/xrv9k-scenario:/opt/topology-data/xrv9k-scenario
    depends_on:
      scorpio:
        condition: service_started
      context-catalog:
        condition: service_started
    restart: always

networks:
  default:
    name: clab
    external: true
