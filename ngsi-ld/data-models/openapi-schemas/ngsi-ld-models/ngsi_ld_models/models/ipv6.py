# coding: utf-8

"""
    NGSI-LD API

    ETSI GS CIM 009 V1.6.1 cross-cutting Context Information Management (CIM); NGSI-LD API.

    The version of the OpenAPI document: 1.6.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from ngsi_ld_models.models.dup_addr_detect_transmits import DupAddrDetectTransmits
from ngsi_ld_models.models.entity_scope import EntityScope
from ngsi_ld_models.models.forwarding import Forwarding
from ngsi_ld_models.models.geo_property import GeoProperty
from ngsi_ld_models.models.ip_enabled import IpEnabled
from ngsi_ld_models.models.ipv6_mtu import Ipv6Mtu
from ngsi_ld_models.models.ipv6_status import Ipv6Status
from ngsi_ld_models.models.is_part_of import IsPartOf
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Ipv6(BaseModel):
    """
    NGSI-LD Entity Type that represents the IPv6 parameters on interfaces of a YANG model-based network device.   # noqa: E501
    """
    id: Optional[StrictStr] = Field(default=None, description="Entity id. ")
    type: Optional[StrictStr] = Field(default='Ipv6', description="NGSI-LD Entity identifier. It has to be Ipv6.")
    scope: Optional[EntityScope] = None
    location: Optional[GeoProperty] = None
    observation_space: Optional[GeoProperty] = Field(default=None, alias="observationSpace")
    operation_space: Optional[GeoProperty] = Field(default=None, alias="operationSpace")
    created_at: Optional[datetime] = Field(default=None, description="Is defined as the temporal Property at which the Entity, Property or Relationship was entered into an NGSI-LD system. ", alias="createdAt")
    modified_at: Optional[datetime] = Field(default=None, description="Is defined as the temporal Property at which the Entity, Property or Relationship was last modified in an NGSI-LD system, e.g. in order to correct a previously entered incorrect value. ", alias="modifiedAt")
    deleted_at: Optional[datetime] = Field(default=None, description="Is defined as the temporal Property at which the Entity, Property or Relationship was deleted from an NGSI-LD system.  Entity deletion timestamp. See clause 4.8 It is only used in notifications reporting deletions and in the Temporal Representation of Entities (clause 4.5.6), Properties (clause 4.5.7), Relationships (clause 4.5.8) and LanguageProperties (clause 5.2.32). ", alias="deletedAt")
    enabled: Optional[IpEnabled] = None
    forwarding: Optional[Forwarding] = None
    mtu: Optional[Ipv6Mtu] = None
    status: Optional[Ipv6Status] = None
    dup_addr_detect_transmits: Optional[DupAddrDetectTransmits] = Field(default=None, alias="dupAddrDetectTransmits")
    is_part_of: IsPartOf = Field(alias="isPartOf")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "type", "scope", "location", "observationSpace", "operationSpace", "createdAt", "modifiedAt", "deletedAt", "enabled", "forwarding", "mtu", "status", "dupAddrDetectTransmits", "isPartOf"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Ipv6'):
            raise ValueError("must be one of enum values ('Ipv6')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Ipv6 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                            "created_at",
                            "modified_at",
                            "deleted_at",
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of scope
        if self.scope:
            _dict['scope'] = self.scope.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of observation_space
        if self.observation_space:
            _dict['observationSpace'] = self.observation_space.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operation_space
        if self.operation_space:
            _dict['operationSpace'] = self.operation_space.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enabled
        if self.enabled:
            _dict['enabled'] = self.enabled.to_dict()
        # override the default output from pydantic by calling `to_dict()` of forwarding
        if self.forwarding:
            _dict['forwarding'] = self.forwarding.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mtu
        if self.mtu:
            _dict['mtu'] = self.mtu.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dup_addr_detect_transmits
        if self.dup_addr_detect_transmits:
            _dict['dupAddrDetectTransmits'] = self.dup_addr_detect_transmits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_part_of
        if self.is_part_of:
            _dict['isPartOf'] = self.is_part_of.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of Ipv6 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type") if obj.get("type") is not None else 'Ipv6',
            "scope": EntityScope.from_dict(obj.get("scope")) if obj.get("scope") is not None else None,
            "location": GeoProperty.from_dict(obj.get("location")) if obj.get("location") is not None else None,
            "observationSpace": GeoProperty.from_dict(obj.get("observationSpace")) if obj.get("observationSpace") is not None else None,
            "operationSpace": GeoProperty.from_dict(obj.get("operationSpace")) if obj.get("operationSpace") is not None else None,
            "createdAt": obj.get("createdAt"),
            "modifiedAt": obj.get("modifiedAt"),
            "deletedAt": obj.get("deletedAt"),
            "enabled": IpEnabled.from_dict(obj.get("enabled")) if obj.get("enabled") is not None else None,
            "forwarding": Forwarding.from_dict(obj.get("forwarding")) if obj.get("forwarding") is not None else None,
            "mtu": Ipv6Mtu.from_dict(obj.get("mtu")) if obj.get("mtu") is not None else None,
            "status": Ipv6Status.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "dupAddrDetectTransmits": DupAddrDetectTransmits.from_dict(obj.get("dupAddrDetectTransmits")) if obj.get("dupAddrDetectTransmits") is not None else None,
            "isPartOf": IsPartOf.from_dict(obj.get("isPartOf")) if obj.get("isPartOf") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


