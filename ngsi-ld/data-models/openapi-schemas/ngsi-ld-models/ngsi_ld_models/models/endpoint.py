# coding: utf-8

"""
    NGSI-LD metamodel and ietf-intefaces@2018-02-20.yang NGSI-LD custom model

    ETSI GS CIM 009 V1.6.1 cross-cutting Context Information Management (CIM); NGSI-LD API.  NGSI-LD metamodel and NGSI-LD custom model derived from the ietf-intefaces@2018-02-20.yang YANG model.   # noqa: E501

    The version of the OpenAPI document: 1.6.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist, validator
from ngsi_ld_models.models.key_value_pair import KeyValuePair

class Endpoint(BaseModel):
    """
    5.2.15 represents the parameters that are required in order to define an endpoint for notifications. 
    """
    uri: StrictStr = Field(..., description="URI which conveys the endpoint which will receive the notification. ")
    accept: Optional[StrictStr] = Field('application/json', description="Intended to convey the MIME type of the notification payload body (JSON, or JSON-LD, or GeoJSON). If not present, default is \"application/json\". ")
    timeout: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Maximum period of time in milliseconds which may elapse before a notification is assumed to have failed. The NGSI-LD system can override this value. This only applies if the binding protocol always returns a response. ")
    cooldown: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Once a failure has occurred, minimum period of time in milliseconds which shall elapse before attempting to make a subsequent notification to the same endpoint after failure. If requests are received before the cooldown period has expired, no notification is sent. ")
    receiver_info: Optional[conlist(KeyValuePair)] = Field(None, alias="receiverInfo", description="Generic {key, value} array to convey optional information to the receiver. ")
    notifier_info: Optional[conlist(KeyValuePair)] = Field(None, alias="notifierInfo", description="Generic {key, value} array to set up the communication channel. ")
    additional_properties: Dict[str, Any] = {}
    __properties = ["uri", "accept", "timeout", "cooldown", "receiverInfo", "notifierInfo"]

    @validator('accept')
    def accept_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('application/json', 'application/ld+json', 'application/geo+json'):
            raise ValueError("must be one of enum values ('application/json', 'application/ld+json', 'application/geo+json')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Endpoint:
        """Create an instance of Endpoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in receiver_info (list)
        _items = []
        if self.receiver_info:
            for _item in self.receiver_info:
                if _item:
                    _items.append(_item.to_dict())
            _dict['receiverInfo'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in notifier_info (list)
        _items = []
        if self.notifier_info:
            for _item in self.notifier_info:
                if _item:
                    _items.append(_item.to_dict())
            _dict['notifierInfo'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Endpoint:
        """Create an instance of Endpoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Endpoint.parse_obj(obj)

        _obj = Endpoint.parse_obj({
            "uri": obj.get("uri"),
            "accept": obj.get("accept") if obj.get("accept") is not None else 'application/json',
            "timeout": obj.get("timeout"),
            "cooldown": obj.get("cooldown"),
            "receiver_info": [KeyValuePair.from_dict(_item) for _item in obj.get("receiverInfo")] if obj.get("receiverInfo") is not None else None,
            "notifier_info": [KeyValuePair.from_dict(_item) for _item in obj.get("notifierInfo")] if obj.get("notifierInfo") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

