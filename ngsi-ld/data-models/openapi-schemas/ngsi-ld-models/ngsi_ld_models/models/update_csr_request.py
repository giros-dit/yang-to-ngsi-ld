# coding: utf-8

"""
    NGSI-LD metamodel and ietf-intefaces@2018-02-20.yang NGSI-LD custom model

    ETSI GS CIM 009 V1.6.1 cross-cutting Context Information Management (CIM); NGSI-LD API.  NGSI-LD metamodel and NGSI-LD custom model derived from the ietf-intefaces@2018-02-20.yang YANG model.   # noqa: E501

    The version of the OpenAPI document: 1.6.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr, validator
from ngsi_ld_models.models.csource_registration_fragment_scope import CsourceRegistrationFragmentScope
from ngsi_ld_models.models.geometry import Geometry
from ngsi_ld_models.models.key_value_pair import KeyValuePair
from ngsi_ld_models.models.ld_context import LdContext
from ngsi_ld_models.models.registration_info import RegistrationInfo
from ngsi_ld_models.models.registration_management_info import RegistrationManagementInfo
from ngsi_ld_models.models.time_interval import TimeInterval

class UpdateCSRRequest(BaseModel):
    """
    UpdateCSRRequest
    """
    id: Optional[StrictStr] = Field(None, description="Unique registration identifier. (JSON-LD @id). There may be multiple registrations per Context Source, i.e. the id is unique per registration. ")
    type: Optional[StrictStr] = Field(None, description="JSON-LD @type Use reserved type for identifying Context Source Registration. ")
    registration_name: Optional[constr(strict=True, min_length=1)] = Field(None, alias="registrationName", description="A name given to this Context Source Registration. ")
    description: Optional[constr(strict=True, min_length=1)] = Field(None, description="A description of this Context Source Registration. ")
    information: Optional[conlist(RegistrationInfo, min_items=1)] = Field(None, description="Describes the Entities, Properties and Relationships for which the Context Source may be able to provide information. ")
    tenant: Optional[StrictStr] = Field(None, description="Identifies the tenant that has to be specified in all requests to the Context Source that are related to the information registered in this Context Source Registration. If not present, the default tenant is assumed. Should only be present in systems supporting multi-tenancy. ")
    observation_interval: Optional[TimeInterval] = Field(None, alias="observationInterval")
    management_interval: Optional[TimeInterval] = Field(None, alias="managementInterval")
    location: Optional[Geometry] = None
    observation_space: Optional[Geometry] = Field(None, alias="observationSpace")
    operation_space: Optional[Geometry] = Field(None, alias="operationSpace")
    expires_at: Optional[datetime] = Field(None, alias="expiresAt", description="Provides an expiration date. When passed the Context Source Registration will become invalid and the Context Source might no longer be available. ")
    endpoint: Optional[StrictStr] = Field(None, description="Endpoint expressed as dereferenceable URI through which the Context Source exposes its NGSI-LD interface. ")
    context_source_info: Optional[conlist(KeyValuePair)] = Field(None, alias="contextSourceInfo", description="Generic {key, value} array to convey optional information to provide when contacting the registered Context Source. ")
    scope: Optional[CsourceRegistrationFragmentScope] = None
    mode: Optional[StrictStr] = Field('inclusive', description="The definition of the mode of distributed operation (see clause 4.3.6) supported by the registered Context Source. ")
    operations: Optional[conlist(StrictStr)] = Field(None, description="The definition limited subset of API operations supported by the registered Context Source.  If undefined, the default set of operations is \"federationOps\" (see clause 4.20). ")
    refresh_rate: Optional[StrictStr] = Field(None, alias="refreshRate", description="An indication of the likely period of time to elapse between updates at this registered endpoint. Brokers may optionally use this information to help implement caching. ")
    management: Optional[RegistrationManagementInfo] = None
    context: LdContext = Field(..., alias="@context")
    additional_properties: Dict[str, Any] = {}
    __properties = ["id", "type", "registrationName", "description", "information", "tenant", "observationInterval", "managementInterval", "location", "observationSpace", "operationSpace", "expiresAt", "endpoint", "contextSourceInfo", "scope", "mode", "operations", "refreshRate", "management", "@context"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ContextSourceRegistration'):
            raise ValueError("must be one of enum values ('ContextSourceRegistration')")
        return value

    @validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('inclusive', 'exclusive', 'redirect', 'auxiliary'):
            raise ValueError("must be one of enum values ('inclusive', 'exclusive', 'redirect', 'auxiliary')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateCSRRequest:
        """Create an instance of UpdateCSRRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in information (list)
        _items = []
        if self.information:
            for _item in self.information:
                if _item:
                    _items.append(_item.to_dict())
            _dict['information'] = _items
        # override the default output from pydantic by calling `to_dict()` of observation_interval
        if self.observation_interval:
            _dict['observationInterval'] = self.observation_interval.to_dict()
        # override the default output from pydantic by calling `to_dict()` of management_interval
        if self.management_interval:
            _dict['managementInterval'] = self.management_interval.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of observation_space
        if self.observation_space:
            _dict['observationSpace'] = self.observation_space.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operation_space
        if self.operation_space:
            _dict['operationSpace'] = self.operation_space.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in context_source_info (list)
        _items = []
        if self.context_source_info:
            for _item in self.context_source_info:
                if _item:
                    _items.append(_item.to_dict())
            _dict['contextSourceInfo'] = _items
        # override the default output from pydantic by calling `to_dict()` of scope
        if self.scope:
            _dict['scope'] = self.scope.to_dict()
        # override the default output from pydantic by calling `to_dict()` of management
        if self.management:
            _dict['management'] = self.management.to_dict()
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['@context'] = self.context.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateCSRRequest:
        """Create an instance of UpdateCSRRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateCSRRequest.parse_obj(obj)

        _obj = UpdateCSRRequest.parse_obj({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "registration_name": obj.get("registrationName"),
            "description": obj.get("description"),
            "information": [RegistrationInfo.from_dict(_item) for _item in obj.get("information")] if obj.get("information") is not None else None,
            "tenant": obj.get("tenant"),
            "observation_interval": TimeInterval.from_dict(obj.get("observationInterval")) if obj.get("observationInterval") is not None else None,
            "management_interval": TimeInterval.from_dict(obj.get("managementInterval")) if obj.get("managementInterval") is not None else None,
            "location": Geometry.from_dict(obj.get("location")) if obj.get("location") is not None else None,
            "observation_space": Geometry.from_dict(obj.get("observationSpace")) if obj.get("observationSpace") is not None else None,
            "operation_space": Geometry.from_dict(obj.get("operationSpace")) if obj.get("operationSpace") is not None else None,
            "expires_at": obj.get("expiresAt"),
            "endpoint": obj.get("endpoint"),
            "context_source_info": [KeyValuePair.from_dict(_item) for _item in obj.get("contextSourceInfo")] if obj.get("contextSourceInfo") is not None else None,
            "scope": CsourceRegistrationFragmentScope.from_dict(obj.get("scope")) if obj.get("scope") is not None else None,
            "mode": obj.get("mode") if obj.get("mode") is not None else 'inclusive',
            "operations": obj.get("operations"),
            "refresh_rate": obj.get("refreshRate"),
            "management": RegistrationManagementInfo.from_dict(obj.get("management")) if obj.get("management") is not None else None,
            "context": LdContext.from_dict(obj.get("@context")) if obj.get("@context") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

