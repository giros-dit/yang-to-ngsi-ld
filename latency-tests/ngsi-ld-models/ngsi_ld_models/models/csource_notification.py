# coding: utf-8

"""
    NGSI-LD API

    ETSI GS CIM 009 V1.6.1 cross-cutting Context Information Management (CIM); NGSI-LD API.

    The version of the OpenAPI document: 1.6.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from ngsi_ld_models.models.csource_registration import CsourceRegistration
from typing import Optional, Set
from typing_extensions import Self

class CsourceNotification(BaseModel):
    """
    5.3.2 This datatype represents the parameters that allow building a Context Source Notification to be sent to a subscriber. 
    """ # noqa: E501
    id: StrictStr = Field(description="Csource notification identifier (JSON-LD @id). ")
    type: StrictStr = Field(description="JSON-LD @type. ")
    subscription_id: StrictStr = Field(description="Identifier of the subscription that originated the notification. ", alias="subscriptionId")
    notified_at: datetime = Field(description="Timestamp corresponding to the instant when the notification was generated by the system. ", alias="notifiedAt")
    data: List[CsourceRegistration] = Field(description="The content of the notification as NGSI-LD entities. See clause 5.2.4. ")
    trigger_reason: StrictStr = Field(description="Indicates whether the Csources in the CsourceRegistration.Input(s) in data are newly matching (initial notification or creation), have been updated (but still match) or do not match any longer.  • \"newlyMatching\" - describes the case that the notified Context Source Registration(s) newly match(es) the identified subscription. This value is used in the first notification and whenever a new Context Source Registration matching the Subscription has been registered, or an existing Context Source Registration that did not match before has been updated in such a way that it matches now.  • \"updated\" - describes the case that the notified Context Source Registration that was part of a previous notification has been updated, but still matches the Subscription.  • \"noLongerMatching\" - describes the case that the notified Context Source Registration that was part of a previous notification no longer matches the Subscription, i.e. as a result of  an update or because it was deleted. ", alias="triggerReason")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "type", "subscriptionId", "notifiedAt", "data", "triggerReason"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('CsourceNotification'):
            raise ValueError("must be one of enum values ('CsourceNotification')")
        return value

    @field_validator('trigger_reason')
    def trigger_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('newlyMatching', 'updated', 'noLongerMatching'):
            raise ValueError("must be one of enum values ('newlyMatching', 'updated', 'noLongerMatching')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CsourceNotification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "data",
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data (list)
        _items = []
        if self.data:
            for _item in self.data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['data'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CsourceNotification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "subscriptionId": obj.get("subscriptionId"),
            "notifiedAt": obj.get("notifiedAt"),
            "data": [CsourceRegistration.from_dict(_item) for _item in obj["data"]] if obj.get("data") is not None else None,
            "triggerReason": obj.get("triggerReason")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


