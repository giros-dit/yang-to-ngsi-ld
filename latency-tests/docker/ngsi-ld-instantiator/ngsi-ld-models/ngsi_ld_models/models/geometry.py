# coding: utf-8

"""
    NGSI-LD API

    ETSI GS CIM 009 V1.6.1 cross-cutting Context Information Management (CIM); NGSI-LD API.

    The version of the OpenAPI document: 1.6.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, field_validator
from ngsi_ld_models.models.geometry_line_string import GeometryLineString
from ngsi_ld_models.models.geometry_multi_line_string import GeometryMultiLineString
from ngsi_ld_models.models.geometry_multi_point import GeometryMultiPoint
from ngsi_ld_models.models.geometry_multi_polygon import GeometryMultiPolygon
from ngsi_ld_models.models.geometry_point import GeometryPoint
from ngsi_ld_models.models.geometry_polygon import GeometryPolygon
from typing import Union, Any, List, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal
from pydantic import StrictStr, Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

GEOMETRY_ONE_OF_SCHEMAS = ["GeometryLineString", "GeometryMultiLineString", "GeometryMultiPoint", "GeometryMultiPolygon", "GeometryPoint", "GeometryPolygon"]

class Geometry(BaseModel):
    """
    A valid GeoJSON geometry object. 
    """
    # data type: GeometryPoint
    oneof_schema_1_validator: Optional[GeometryPoint] = None
    # data type: GeometryMultiPoint
    oneof_schema_2_validator: Optional[GeometryMultiPoint] = None
    # data type: GeometryPolygon
    oneof_schema_3_validator: Optional[GeometryPolygon] = None
    # data type: GeometryLineString
    oneof_schema_4_validator: Optional[GeometryLineString] = None
    # data type: GeometryMultiLineString
    oneof_schema_5_validator: Optional[GeometryMultiLineString] = None
    # data type: GeometryMultiPolygon
    oneof_schema_6_validator: Optional[GeometryMultiPolygon] = None
    actual_instance: Optional[Union[GeometryLineString, GeometryMultiLineString, GeometryMultiPoint, GeometryMultiPolygon, GeometryPoint, GeometryPolygon]] = None
    one_of_schemas: List[str] = Literal["GeometryLineString", "GeometryMultiLineString", "GeometryMultiPoint", "GeometryMultiPolygon", "GeometryPoint", "GeometryPolygon"]

    model_config = {
        "validate_assignment": True
    }


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = Geometry.model_construct()
        error_messages = []
        match = 0
        # validate data type: GeometryPoint
        if not isinstance(v, GeometryPoint):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GeometryPoint`")
        else:
            match += 1
        # validate data type: GeometryMultiPoint
        if not isinstance(v, GeometryMultiPoint):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GeometryMultiPoint`")
        else:
            match += 1
        # validate data type: GeometryPolygon
        if not isinstance(v, GeometryPolygon):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GeometryPolygon`")
        else:
            match += 1
        # validate data type: GeometryLineString
        if not isinstance(v, GeometryLineString):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GeometryLineString`")
        else:
            match += 1
        # validate data type: GeometryMultiLineString
        if not isinstance(v, GeometryMultiLineString):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GeometryMultiLineString`")
        else:
            match += 1
        # validate data type: GeometryMultiPolygon
        if not isinstance(v, GeometryMultiPolygon):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GeometryMultiPolygon`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in Geometry with oneOf schemas: GeometryLineString, GeometryMultiLineString, GeometryMultiPoint, GeometryMultiPolygon, GeometryPoint, GeometryPolygon. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in Geometry with oneOf schemas: GeometryLineString, GeometryMultiLineString, GeometryMultiPoint, GeometryMultiPolygon, GeometryPoint, GeometryPolygon. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into GeometryPoint
        try:
            instance.actual_instance = GeometryPoint.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GeometryMultiPoint
        try:
            instance.actual_instance = GeometryMultiPoint.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GeometryPolygon
        try:
            instance.actual_instance = GeometryPolygon.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GeometryLineString
        try:
            instance.actual_instance = GeometryLineString.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GeometryMultiLineString
        try:
            instance.actual_instance = GeometryMultiLineString.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GeometryMultiPolygon
        try:
            instance.actual_instance = GeometryMultiPolygon.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into Geometry with oneOf schemas: GeometryLineString, GeometryMultiLineString, GeometryMultiPoint, GeometryMultiPolygon, GeometryPoint, GeometryPolygon. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into Geometry with oneOf schemas: GeometryLineString, GeometryMultiLineString, GeometryMultiPoint, GeometryMultiPolygon, GeometryPoint, GeometryPolygon. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


